(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const o of n.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&r(o)}).observe(document,{childList:!0,subtree:!0});function t(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function r(i){if(i.ep)return;i.ep=!0;const n=t(i);fetch(i.href,n)}})();const Wt="modulepreload",Qt=function(s){return"/"+s},Ge={},X=function(e,t,r){let i=Promise.resolve();if(t&&t.length>0){let o=function(c){return Promise.all(c.map(d=>Promise.resolve(d).then(u=>({status:"fulfilled",value:u}),u=>({status:"rejected",reason:u}))))};document.getElementsByTagName("link");const a=document.querySelector("meta[property=csp-nonce]"),l=(a==null?void 0:a.nonce)||(a==null?void 0:a.getAttribute("nonce"));i=o(t.map(c=>{if(c=Qt(c),c in Ge)return;Ge[c]=!0;const d=c.endsWith(".css"),u=d?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${u}`))return;const h=document.createElement("link");if(h.rel=d?"stylesheet":Wt,d||(h.as="script"),h.crossOrigin="",h.href=c,l&&h.setAttribute("nonce",l),document.head.appendChild(h),d)return new Promise((f,g)=>{h.addEventListener("load",f),h.addEventListener("error",()=>g(new Error(`Unable to preload CSS for ${c}`)))})}))}function n(o){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=o,window.dispatchEvent(a),!a.defaultPrevented)throw o}return i.then(o=>{for(const a of o||[])a.status==="rejected"&&n(a.reason);return e().catch(n)})},Yt=s=>{let e;return s?e=s:typeof fetch>"u"?e=(...t)=>X(async()=>{const{default:r}=await Promise.resolve().then(()=>ee);return{default:r}},void 0).then(({default:r})=>r(...t)):e=fetch,(...t)=>e(...t)};class Be extends Error{constructor(e,t="FunctionsError",r){super(e),this.name=t,this.context=r}}class Xt extends Be{constructor(e){super("Failed to send a request to the Edge Function","FunctionsFetchError",e)}}class Zt extends Be{constructor(e){super("Relay Error invoking the Edge Function","FunctionsRelayError",e)}}class er extends Be{constructor(e){super("Edge Function returned a non-2xx status code","FunctionsHttpError",e)}}var $e;(function(s){s.Any="any",s.ApNortheast1="ap-northeast-1",s.ApNortheast2="ap-northeast-2",s.ApSouth1="ap-south-1",s.ApSoutheast1="ap-southeast-1",s.ApSoutheast2="ap-southeast-2",s.CaCentral1="ca-central-1",s.EuCentral1="eu-central-1",s.EuWest1="eu-west-1",s.EuWest2="eu-west-2",s.EuWest3="eu-west-3",s.SaEast1="sa-east-1",s.UsEast1="us-east-1",s.UsWest1="us-west-1",s.UsWest2="us-west-2"})($e||($e={}));var tr=function(s,e,t,r){function i(n){return n instanceof t?n:new t(function(o){o(n)})}return new(t||(t=Promise))(function(n,o){function a(d){try{c(r.next(d))}catch(u){o(u)}}function l(d){try{c(r.throw(d))}catch(u){o(u)}}function c(d){d.done?n(d.value):i(d.value).then(a,l)}c((r=r.apply(s,e||[])).next())})};class rr{constructor(e,{headers:t={},customFetch:r,region:i=$e.Any}={}){this.url=e,this.headers=t,this.region=i,this.fetch=Yt(r)}setAuth(e){this.headers.Authorization=`Bearer ${e}`}invoke(e,t={}){var r;return tr(this,void 0,void 0,function*(){try{const{headers:i,method:n,body:o}=t;let a={},{region:l}=t;l||(l=this.region),l&&l!=="any"&&(a["x-region"]=l);let c;o&&(i&&!Object.prototype.hasOwnProperty.call(i,"Content-Type")||!i)&&(typeof Blob<"u"&&o instanceof Blob||o instanceof ArrayBuffer?(a["Content-Type"]="application/octet-stream",c=o):typeof o=="string"?(a["Content-Type"]="text/plain",c=o):typeof FormData<"u"&&o instanceof FormData?c=o:(a["Content-Type"]="application/json",c=JSON.stringify(o)));const d=yield this.fetch(`${this.url}/${e}`,{method:n||"POST",headers:Object.assign(Object.assign(Object.assign({},a),this.headers),i),body:c}).catch(g=>{throw new Xt(g)}),u=d.headers.get("x-relay-error");if(u&&u==="true")throw new Zt(d);if(!d.ok)throw new er(d);let h=((r=d.headers.get("Content-Type"))!==null&&r!==void 0?r:"text/plain").split(";")[0].trim(),f;return h==="application/json"?f=yield d.json():h==="application/octet-stream"?f=yield d.blob():h==="text/event-stream"?f=d:h==="multipart/form-data"?f=yield d.formData():f=yield d.text(),{data:f,error:null}}catch(i){return{data:null,error:i}}})}}function sr(s){return s&&s.__esModule&&Object.prototype.hasOwnProperty.call(s,"default")?s.default:s}function ir(s){if(Object.prototype.hasOwnProperty.call(s,"__esModule"))return s;var e=s.default;if(typeof e=="function"){var t=function r(){return this instanceof r?Reflect.construct(e,arguments,this.constructor):e.apply(this,arguments)};t.prototype=e.prototype}else t={};return Object.defineProperty(t,"__esModule",{value:!0}),Object.keys(s).forEach(function(r){var i=Object.getOwnPropertyDescriptor(s,r);Object.defineProperty(t,r,i.get?i:{enumerable:!0,get:function(){return s[r]}})}),t}var w={},F={},z={},H={},J={},G={},nr=function(){if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw new Error("unable to locate global object")},Z=nr();const or=Z.fetch,kt=Z.fetch.bind(Z),xt=Z.Headers,ar=Z.Request,lr=Z.Response,ee=Object.freeze(Object.defineProperty({__proto__:null,Headers:xt,Request:ar,Response:lr,default:kt,fetch:or},Symbol.toStringTag,{value:"Module"})),cr=ir(ee);var fe={},Ke;function Et(){if(Ke)return fe;Ke=1,Object.defineProperty(fe,"__esModule",{value:!0});class s extends Error{constructor(t){super(t.message),this.name="PostgrestError",this.details=t.details,this.hint=t.hint,this.code=t.code}}return fe.default=s,fe}var Ve;function St(){if(Ve)return G;Ve=1;var s=G&&G.__importDefault||function(i){return i&&i.__esModule?i:{default:i}};Object.defineProperty(G,"__esModule",{value:!0});const e=s(cr),t=s(Et());class r{constructor(n){this.shouldThrowOnError=!1,this.method=n.method,this.url=n.url,this.headers=n.headers,this.schema=n.schema,this.body=n.body,this.shouldThrowOnError=n.shouldThrowOnError,this.signal=n.signal,this.isMaybeSingle=n.isMaybeSingle,n.fetch?this.fetch=n.fetch:typeof fetch>"u"?this.fetch=e.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(n,o){return this.headers=Object.assign({},this.headers),this.headers[n]=o,this}then(n,o){this.schema===void 0||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),this.method!=="GET"&&this.method!=="HEAD"&&(this.headers["Content-Type"]="application/json");const a=this.fetch;let l=a(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async c=>{var d,u,h;let f=null,g=null,y=null,m=c.status,T=c.statusText;if(c.ok){if(this.method!=="HEAD"){const S=await c.text();S===""||(this.headers.Accept==="text/csv"||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?g=S:g=JSON.parse(S))}const x=(d=this.headers.Prefer)===null||d===void 0?void 0:d.match(/count=(exact|planned|estimated)/),E=(u=c.headers.get("content-range"))===null||u===void 0?void 0:u.split("/");x&&E&&E.length>1&&(y=parseInt(E[1])),this.isMaybeSingle&&this.method==="GET"&&Array.isArray(g)&&(g.length>1?(f={code:"PGRST116",details:`Results contain ${g.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},g=null,y=null,m=406,T="Not Acceptable"):g.length===1?g=g[0]:g=null)}else{const x=await c.text();try{f=JSON.parse(x),Array.isArray(f)&&c.status===404&&(g=[],f=null,m=200,T="OK")}catch{c.status===404&&x===""?(m=204,T="No Content"):f={message:x}}if(f&&this.isMaybeSingle&&(!((h=f==null?void 0:f.details)===null||h===void 0)&&h.includes("0 rows"))&&(f=null,m=200,T="OK"),f&&this.shouldThrowOnError)throw new t.default(f)}return{error:f,data:g,count:y,status:m,statusText:T}});return this.shouldThrowOnError||(l=l.catch(c=>{var d,u,h;return{error:{message:`${(d=c==null?void 0:c.name)!==null&&d!==void 0?d:"FetchError"}: ${c==null?void 0:c.message}`,details:`${(u=c==null?void 0:c.stack)!==null&&u!==void 0?u:""}`,hint:"",code:`${(h=c==null?void 0:c.code)!==null&&h!==void 0?h:""}`},data:null,count:null,status:0,statusText:""}})),l.then(n,o)}returns(){return this}overrideTypes(){return this}}return G.default=r,G}var We;function Tt(){if(We)return J;We=1;var s=J&&J.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(J,"__esModule",{value:!0});const e=s(St());class t extends e.default{select(i){let n=!1;const o=(i??"*").split("").map(a=>/\s/.test(a)&&!n?"":(a==='"'&&(n=!n),a)).join("");return this.url.searchParams.set("select",o),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(i,{ascending:n=!0,nullsFirst:o,foreignTable:a,referencedTable:l=a}={}){const c=l?`${l}.order`:"order",d=this.url.searchParams.get(c);return this.url.searchParams.set(c,`${d?`${d},`:""}${i}.${n?"asc":"desc"}${o===void 0?"":o?".nullsfirst":".nullslast"}`),this}limit(i,{foreignTable:n,referencedTable:o=n}={}){const a=typeof o>"u"?"limit":`${o}.limit`;return this.url.searchParams.set(a,`${i}`),this}range(i,n,{foreignTable:o,referencedTable:a=o}={}){const l=typeof a>"u"?"offset":`${a}.offset`,c=typeof a>"u"?"limit":`${a}.limit`;return this.url.searchParams.set(l,`${i}`),this.url.searchParams.set(c,`${n-i+1}`),this}abortSignal(i){return this.signal=i,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return this.method==="GET"?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:i=!1,verbose:n=!1,settings:o=!1,buffers:a=!1,wal:l=!1,format:c="text"}={}){var d;const u=[i?"analyze":null,n?"verbose":null,o?"settings":null,a?"buffers":null,l?"wal":null].filter(Boolean).join("|"),h=(d=this.headers.Accept)!==null&&d!==void 0?d:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${c}; for="${h}"; options=${u};`,c==="json"?this:this}rollback(){var i;return((i=this.headers.Prefer)!==null&&i!==void 0?i:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}}return J.default=t,J}var Qe;function Ne(){if(Qe)return H;Qe=1;var s=H&&H.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(H,"__esModule",{value:!0});const e=s(Tt());class t extends e.default{eq(i,n){return this.url.searchParams.append(i,`eq.${n}`),this}neq(i,n){return this.url.searchParams.append(i,`neq.${n}`),this}gt(i,n){return this.url.searchParams.append(i,`gt.${n}`),this}gte(i,n){return this.url.searchParams.append(i,`gte.${n}`),this}lt(i,n){return this.url.searchParams.append(i,`lt.${n}`),this}lte(i,n){return this.url.searchParams.append(i,`lte.${n}`),this}like(i,n){return this.url.searchParams.append(i,`like.${n}`),this}likeAllOf(i,n){return this.url.searchParams.append(i,`like(all).{${n.join(",")}}`),this}likeAnyOf(i,n){return this.url.searchParams.append(i,`like(any).{${n.join(",")}}`),this}ilike(i,n){return this.url.searchParams.append(i,`ilike.${n}`),this}ilikeAllOf(i,n){return this.url.searchParams.append(i,`ilike(all).{${n.join(",")}}`),this}ilikeAnyOf(i,n){return this.url.searchParams.append(i,`ilike(any).{${n.join(",")}}`),this}is(i,n){return this.url.searchParams.append(i,`is.${n}`),this}in(i,n){const o=Array.from(new Set(n)).map(a=>typeof a=="string"&&new RegExp("[,()]").test(a)?`"${a}"`:`${a}`).join(",");return this.url.searchParams.append(i,`in.(${o})`),this}contains(i,n){return typeof n=="string"?this.url.searchParams.append(i,`cs.${n}`):Array.isArray(n)?this.url.searchParams.append(i,`cs.{${n.join(",")}}`):this.url.searchParams.append(i,`cs.${JSON.stringify(n)}`),this}containedBy(i,n){return typeof n=="string"?this.url.searchParams.append(i,`cd.${n}`):Array.isArray(n)?this.url.searchParams.append(i,`cd.{${n.join(",")}}`):this.url.searchParams.append(i,`cd.${JSON.stringify(n)}`),this}rangeGt(i,n){return this.url.searchParams.append(i,`sr.${n}`),this}rangeGte(i,n){return this.url.searchParams.append(i,`nxl.${n}`),this}rangeLt(i,n){return this.url.searchParams.append(i,`sl.${n}`),this}rangeLte(i,n){return this.url.searchParams.append(i,`nxr.${n}`),this}rangeAdjacent(i,n){return this.url.searchParams.append(i,`adj.${n}`),this}overlaps(i,n){return typeof n=="string"?this.url.searchParams.append(i,`ov.${n}`):this.url.searchParams.append(i,`ov.{${n.join(",")}}`),this}textSearch(i,n,{config:o,type:a}={}){let l="";a==="plain"?l="pl":a==="phrase"?l="ph":a==="websearch"&&(l="w");const c=o===void 0?"":`(${o})`;return this.url.searchParams.append(i,`${l}fts${c}.${n}`),this}match(i){return Object.entries(i).forEach(([n,o])=>{this.url.searchParams.append(n,`eq.${o}`)}),this}not(i,n,o){return this.url.searchParams.append(i,`not.${n}.${o}`),this}or(i,{foreignTable:n,referencedTable:o=n}={}){const a=o?`${o}.or`:"or";return this.url.searchParams.append(a,`(${i})`),this}filter(i,n,o){return this.url.searchParams.append(i,`${n}.${o}`),this}}return H.default=t,H}var Ye;function jt(){if(Ye)return z;Ye=1;var s=z&&z.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(z,"__esModule",{value:!0});const e=s(Ne());class t{constructor(i,{headers:n={},schema:o,fetch:a}){this.url=i,this.headers=n,this.schema=o,this.fetch=a}select(i,{head:n=!1,count:o}={}){const a=n?"HEAD":"GET";let l=!1;const c=(i??"*").split("").map(d=>/\s/.test(d)&&!l?"":(d==='"'&&(l=!l),d)).join("");return this.url.searchParams.set("select",c),o&&(this.headers.Prefer=`count=${o}`),new e.default({method:a,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(i,{count:n,defaultToNull:o=!0}={}){const a="POST",l=[];if(this.headers.Prefer&&l.push(this.headers.Prefer),n&&l.push(`count=${n}`),o||l.push("missing=default"),this.headers.Prefer=l.join(","),Array.isArray(i)){const c=i.reduce((d,u)=>d.concat(Object.keys(u)),[]);if(c.length>0){const d=[...new Set(c)].map(u=>`"${u}"`);this.url.searchParams.set("columns",d.join(","))}}return new e.default({method:a,url:this.url,headers:this.headers,schema:this.schema,body:i,fetch:this.fetch,allowEmpty:!1})}upsert(i,{onConflict:n,ignoreDuplicates:o=!1,count:a,defaultToNull:l=!0}={}){const c="POST",d=[`resolution=${o?"ignore":"merge"}-duplicates`];if(n!==void 0&&this.url.searchParams.set("on_conflict",n),this.headers.Prefer&&d.push(this.headers.Prefer),a&&d.push(`count=${a}`),l||d.push("missing=default"),this.headers.Prefer=d.join(","),Array.isArray(i)){const u=i.reduce((h,f)=>h.concat(Object.keys(f)),[]);if(u.length>0){const h=[...new Set(u)].map(f=>`"${f}"`);this.url.searchParams.set("columns",h.join(","))}}return new e.default({method:c,url:this.url,headers:this.headers,schema:this.schema,body:i,fetch:this.fetch,allowEmpty:!1})}update(i,{count:n}={}){const o="PATCH",a=[];return this.headers.Prefer&&a.push(this.headers.Prefer),n&&a.push(`count=${n}`),this.headers.Prefer=a.join(","),new e.default({method:o,url:this.url,headers:this.headers,schema:this.schema,body:i,fetch:this.fetch,allowEmpty:!1})}delete({count:i}={}){const n="DELETE",o=[];return i&&o.push(`count=${i}`),this.headers.Prefer&&o.unshift(this.headers.Prefer),this.headers.Prefer=o.join(","),new e.default({method:n,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}}return z.default=t,z}var re={},se={},Xe;function dr(){return Xe||(Xe=1,Object.defineProperty(se,"__esModule",{value:!0}),se.version=void 0,se.version="0.0.0-automated"),se}var Ze;function ur(){if(Ze)return re;Ze=1,Object.defineProperty(re,"__esModule",{value:!0}),re.DEFAULT_HEADERS=void 0;const s=dr();return re.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${s.version}`},re}var et;function hr(){if(et)return F;et=1;var s=F&&F.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(F,"__esModule",{value:!0});const e=s(jt()),t=s(Ne()),r=ur();class i{constructor(o,{headers:a={},schema:l,fetch:c}={}){this.url=o,this.headers=Object.assign(Object.assign({},r.DEFAULT_HEADERS),a),this.schemaName=l,this.fetch=c}from(o){const a=new URL(`${this.url}/${o}`);return new e.default(a,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(o){return new i(this.url,{headers:this.headers,schema:o,fetch:this.fetch})}rpc(o,a={},{head:l=!1,get:c=!1,count:d}={}){let u;const h=new URL(`${this.url}/rpc/${o}`);let f;l||c?(u=l?"HEAD":"GET",Object.entries(a).filter(([y,m])=>m!==void 0).map(([y,m])=>[y,Array.isArray(m)?`{${m.join(",")}}`:`${m}`]).forEach(([y,m])=>{h.searchParams.append(y,m)})):(u="POST",f=a);const g=Object.assign({},this.headers);return d&&(g.Prefer=`count=${d}`),new t.default({method:u,url:h,headers:g,schema:this.schemaName,body:f,fetch:this.fetch,allowEmpty:!1})}}return F.default=i,F}var tt;function fr(){if(tt)return w;tt=1;var s=w&&w.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(w,"__esModule",{value:!0}),w.PostgrestError=w.PostgrestBuilder=w.PostgrestTransformBuilder=w.PostgrestFilterBuilder=w.PostgrestQueryBuilder=w.PostgrestClient=void 0;const e=s(hr());w.PostgrestClient=e.default;const t=s(jt());w.PostgrestQueryBuilder=t.default;const r=s(Ne());w.PostgrestFilterBuilder=r.default;const i=s(Tt());w.PostgrestTransformBuilder=i.default;const n=s(St());w.PostgrestBuilder=n.default;const o=s(Et());return w.PostgrestError=o.default,w.default={PostgrestClient:e.default,PostgrestQueryBuilder:t.default,PostgrestFilterBuilder:r.default,PostgrestTransformBuilder:i.default,PostgrestBuilder:n.default,PostgrestError:o.default},w}var gr=fr();const pr=sr(gr),{PostgrestClient:mr,PostgrestQueryBuilder:Mi,PostgrestFilterBuilder:Bi,PostgrestTransformBuilder:Ni,PostgrestBuilder:qi,PostgrestError:Fi}=pr,vr="2.11.2",yr={"X-Client-Info":`realtime-js/${vr}`},br="1.0.0",Pt=1e4,wr=1e3;var Y;(function(s){s[s.connecting=0]="connecting",s[s.open=1]="open",s[s.closing=2]="closing",s[s.closed=3]="closed"})(Y||(Y={}));var P;(function(s){s.closed="closed",s.errored="errored",s.joined="joined",s.joining="joining",s.leaving="leaving"})(P||(P={}));var $;(function(s){s.close="phx_close",s.error="phx_error",s.join="phx_join",s.reply="phx_reply",s.leave="phx_leave",s.access_token="access_token"})($||($={}));var Oe;(function(s){s.websocket="websocket"})(Oe||(Oe={}));var N;(function(s){s.Connecting="connecting",s.Open="open",s.Closing="closing",s.Closed="closed"})(N||(N={}));class _r{constructor(){this.HEADER_LENGTH=1}decode(e,t){return e.constructor===ArrayBuffer?t(this._binaryDecode(e)):t(typeof e=="string"?JSON.parse(e):{})}_binaryDecode(e){const t=new DataView(e),r=new TextDecoder;return this._decodeBroadcast(e,t,r)}_decodeBroadcast(e,t,r){const i=t.getUint8(1),n=t.getUint8(2);let o=this.HEADER_LENGTH+2;const a=r.decode(e.slice(o,o+i));o=o+i;const l=r.decode(e.slice(o,o+n));o=o+n;const c=JSON.parse(r.decode(e.slice(o,e.byteLength)));return{ref:null,topic:a,event:l,payload:c}}}class $t{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=void 0,this.tries=0,this.callback=e,this.timerCalc=t}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}var b;(function(s){s.abstime="abstime",s.bool="bool",s.date="date",s.daterange="daterange",s.float4="float4",s.float8="float8",s.int2="int2",s.int4="int4",s.int4range="int4range",s.int8="int8",s.int8range="int8range",s.json="json",s.jsonb="jsonb",s.money="money",s.numeric="numeric",s.oid="oid",s.reltime="reltime",s.text="text",s.time="time",s.timestamp="timestamp",s.timestamptz="timestamptz",s.timetz="timetz",s.tsrange="tsrange",s.tstzrange="tstzrange"})(b||(b={}));const rt=(s,e,t={})=>{var r;const i=(r=t.skipTypes)!==null&&r!==void 0?r:[];return Object.keys(e).reduce((n,o)=>(n[o]=kr(o,s,e,i),n),{})},kr=(s,e,t,r)=>{const i=e.find(a=>a.name===s),n=i==null?void 0:i.type,o=t[s];return n&&!r.includes(n)?Ot(n,o):Ae(o)},Ot=(s,e)=>{if(s.charAt(0)==="_"){const t=s.slice(1,s.length);return Tr(e,t)}switch(s){case b.bool:return xr(e);case b.float4:case b.float8:case b.int2:case b.int4:case b.int8:case b.numeric:case b.oid:return Er(e);case b.json:case b.jsonb:return Sr(e);case b.timestamp:return jr(e);case b.abstime:case b.date:case b.daterange:case b.int4range:case b.int8range:case b.money:case b.reltime:case b.text:case b.time:case b.timestamptz:case b.timetz:case b.tsrange:case b.tstzrange:return Ae(e);default:return Ae(e)}},Ae=s=>s,xr=s=>{switch(s){case"t":return!0;case"f":return!1;default:return s}},Er=s=>{if(typeof s=="string"){const e=parseFloat(s);if(!Number.isNaN(e))return e}return s},Sr=s=>{if(typeof s=="string")try{return JSON.parse(s)}catch(e){return console.log(`JSON parse error: ${e}`),s}return s},Tr=(s,e)=>{if(typeof s!="string")return s;const t=s.length-1,r=s[t];if(s[0]==="{"&&r==="}"){let n;const o=s.slice(1,t);try{n=JSON.parse("["+o+"]")}catch{n=o?o.split(","):[]}return n.map(a=>Ot(e,a))}return s},jr=s=>typeof s=="string"?s.replace(" ","T"):s,At=s=>{let e=s;return e=e.replace(/^ws/i,"http"),e=e.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),e.replace(/\/+$/,"")};class xe{constructor(e,t,r={},i=Pt){this.channel=e,this.event=t,this.payload=r,this.timeout=i,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(e){this.timeout=e,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(e){this.payload=Object.assign(Object.assign({},this.payload),e)}receive(e,t){var r;return this._hasReceived(e)&&t((r=this.receivedResp)===null||r===void 0?void 0:r.response),this.recHooks.push({status:e,callback:t}),this}startTimeout(){if(this.timeoutTimer)return;this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref);const e=t=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=t,this._matchReceive(t)};this.channel._on(this.refEvent,{},e),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}trigger(e,t){this.refEvent&&this.channel._trigger(this.refEvent,{status:e,response:t})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:e,response:t}){this.recHooks.filter(r=>r.status===e).forEach(r=>r.callback(t))}_hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}}var st;(function(s){s.SYNC="sync",s.JOIN="join",s.LEAVE="leave"})(st||(st={}));class oe{constructor(e,t){this.channel=e,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const r=(t==null?void 0:t.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(r.state,{},i=>{const{onJoin:n,onLeave:o,onSync:a}=this.caller;this.joinRef=this.channel._joinRef(),this.state=oe.syncState(this.state,i,n,o),this.pendingDiffs.forEach(l=>{this.state=oe.syncDiff(this.state,l,n,o)}),this.pendingDiffs=[],a()}),this.channel._on(r.diff,{},i=>{const{onJoin:n,onLeave:o,onSync:a}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(i):(this.state=oe.syncDiff(this.state,i,n,o),a())}),this.onJoin((i,n,o)=>{this.channel._trigger("presence",{event:"join",key:i,currentPresences:n,newPresences:o})}),this.onLeave((i,n,o)=>{this.channel._trigger("presence",{event:"leave",key:i,currentPresences:n,leftPresences:o})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(e,t,r,i){const n=this.cloneDeep(e),o=this.transformState(t),a={},l={};return this.map(n,(c,d)=>{o[c]||(l[c]=d)}),this.map(o,(c,d)=>{const u=n[c];if(u){const h=d.map(m=>m.presence_ref),f=u.map(m=>m.presence_ref),g=d.filter(m=>f.indexOf(m.presence_ref)<0),y=u.filter(m=>h.indexOf(m.presence_ref)<0);g.length>0&&(a[c]=g),y.length>0&&(l[c]=y)}else a[c]=d}),this.syncDiff(n,{joins:a,leaves:l},r,i)}static syncDiff(e,t,r,i){const{joins:n,leaves:o}={joins:this.transformState(t.joins),leaves:this.transformState(t.leaves)};return r||(r=()=>{}),i||(i=()=>{}),this.map(n,(a,l)=>{var c;const d=(c=e[a])!==null&&c!==void 0?c:[];if(e[a]=this.cloneDeep(l),d.length>0){const u=e[a].map(f=>f.presence_ref),h=d.filter(f=>u.indexOf(f.presence_ref)<0);e[a].unshift(...h)}r(a,d,l)}),this.map(o,(a,l)=>{let c=e[a];if(!c)return;const d=l.map(u=>u.presence_ref);c=c.filter(u=>d.indexOf(u.presence_ref)<0),e[a]=c,i(a,c,l),c.length===0&&delete e[a]}),e}static map(e,t){return Object.getOwnPropertyNames(e).map(r=>t(r,e[r]))}static transformState(e){return e=this.cloneDeep(e),Object.getOwnPropertyNames(e).reduce((t,r)=>{const i=e[r];return"metas"in i?t[r]=i.metas.map(n=>(n.presence_ref=n.phx_ref,delete n.phx_ref,delete n.phx_ref_prev,n)):t[r]=i,t},{})}static cloneDeep(e){return JSON.parse(JSON.stringify(e))}onJoin(e){this.caller.onJoin=e}onLeave(e){this.caller.onLeave=e}onSync(e){this.caller.onSync=e}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}var it;(function(s){s.ALL="*",s.INSERT="INSERT",s.UPDATE="UPDATE",s.DELETE="DELETE"})(it||(it={}));var nt;(function(s){s.BROADCAST="broadcast",s.PRESENCE="presence",s.POSTGRES_CHANGES="postgres_changes",s.SYSTEM="system"})(nt||(nt={}));var C;(function(s){s.SUBSCRIBED="SUBSCRIBED",s.TIMED_OUT="TIMED_OUT",s.CLOSED="CLOSED",s.CHANNEL_ERROR="CHANNEL_ERROR"})(C||(C={}));class qe{constructor(e,t={config:{}},r){this.topic=e,this.params=t,this.socket=r,this.bindings={},this.state=P.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=e.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},t.config),this.timeout=this.socket.timeout,this.joinPush=new xe(this,$.join,this.params,this.timeout),this.rejoinTimer=new $t(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=P.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(i=>i.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=P.closed,this.socket._remove(this)}),this._onError(i=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,i),this.state=P.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=P.errored,this.rejoinTimer.scheduleTimeout())}),this._on($.reply,{},(i,n)=>{this._trigger(this._replyEventName(n),i)}),this.presence=new oe(this),this.broadcastEndpointURL=At(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(e,t=this.timeout){var r,i;if(this.socket.isConnected()||this.socket.connect(),this.joinedOnce)throw"tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance";{const{config:{broadcast:n,presence:o,private:a}}=this.params;this._onError(d=>e==null?void 0:e(C.CHANNEL_ERROR,d)),this._onClose(()=>e==null?void 0:e(C.CLOSED));const l={},c={broadcast:n,presence:o,postgres_changes:(i=(r=this.bindings.postgres_changes)===null||r===void 0?void 0:r.map(d=>d.filter))!==null&&i!==void 0?i:[],private:a};this.socket.accessTokenValue&&(l.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:c},l)),this.joinedOnce=!0,this._rejoin(t),this.joinPush.receive("ok",async({postgres_changes:d})=>{var u;if(this.socket.setAuth(),d===void 0){e==null||e(C.SUBSCRIBED);return}else{const h=this.bindings.postgres_changes,f=(u=h==null?void 0:h.length)!==null&&u!==void 0?u:0,g=[];for(let y=0;y<f;y++){const m=h[y],{filter:{event:T,schema:O,table:x,filter:E}}=m,S=d&&d[y];if(S&&S.event===T&&S.schema===O&&S.table===x&&S.filter===E)g.push(Object.assign(Object.assign({},m),{id:S.id}));else{this.unsubscribe(),e==null||e(C.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes"));return}}this.bindings.postgres_changes=g,e&&e(C.SUBSCRIBED);return}}).receive("error",d=>{e==null||e(C.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(d).join(", ")||"error")))}).receive("timeout",()=>{e==null||e(C.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(e,t={}){return await this.send({type:"presence",event:"track",payload:e},t.timeout||this.timeout)}async untrack(e={}){return await this.send({type:"presence",event:"untrack"},e)}on(e,t,r){return this._on(e,t,r)}async send(e,t={}){var r,i;if(!this._canPush()&&e.type==="broadcast"){const{event:n,payload:o}=e,l={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:n,payload:o,private:this.private}]})};try{const c=await this._fetchWithTimeout(this.broadcastEndpointURL,l,(r=t.timeout)!==null&&r!==void 0?r:this.timeout);return await((i=c.body)===null||i===void 0?void 0:i.cancel()),c.ok?"ok":"error"}catch(c){return c.name==="AbortError"?"timed out":"error"}}else return new Promise(n=>{var o,a,l;const c=this._push(e.type,e,t.timeout||this.timeout);e.type==="broadcast"&&!(!((l=(a=(o=this.params)===null||o===void 0?void 0:o.config)===null||a===void 0?void 0:a.broadcast)===null||l===void 0)&&l.ack)&&n("ok"),c.receive("ok",()=>n("ok")),c.receive("error",()=>n("error")),c.receive("timeout",()=>n("timed out"))})}updateJoinPayload(e){this.joinPush.updatePayload(e)}unsubscribe(e=this.timeout){this.state=P.leaving;const t=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger($.close,"leave",this._joinRef())};return this.rejoinTimer.reset(),this.joinPush.destroy(),new Promise(r=>{const i=new xe(this,$.leave,{},e);i.receive("ok",()=>{t(),r("ok")}).receive("timeout",()=>{t(),r("timed out")}).receive("error",()=>{r("error")}),i.send(),this._canPush()||i.trigger("ok",{})})}async _fetchWithTimeout(e,t,r){const i=new AbortController,n=setTimeout(()=>i.abort(),r),o=await this.socket.fetch(e,Object.assign(Object.assign({},t),{signal:i.signal}));return clearTimeout(n),o}_push(e,t,r=this.timeout){if(!this.joinedOnce)throw`tried to push '${e}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let i=new xe(this,e,t,r);return this._canPush()?i.send():(i.startTimeout(),this.pushBuffer.push(i)),i}_onMessage(e,t,r){return t}_isMember(e){return this.topic===e}_joinRef(){return this.joinPush.ref}_trigger(e,t,r){var i,n;const o=e.toLocaleLowerCase(),{close:a,error:l,leave:c,join:d}=$;if(r&&[a,l,c,d].indexOf(o)>=0&&r!==this._joinRef())return;let h=this._onMessage(o,t,r);if(t&&!h)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(o)?(i=this.bindings.postgres_changes)===null||i===void 0||i.filter(f=>{var g,y,m;return((g=f.filter)===null||g===void 0?void 0:g.event)==="*"||((m=(y=f.filter)===null||y===void 0?void 0:y.event)===null||m===void 0?void 0:m.toLocaleLowerCase())===o}).map(f=>f.callback(h,r)):(n=this.bindings[o])===null||n===void 0||n.filter(f=>{var g,y,m,T,O,x;if(["broadcast","presence","postgres_changes"].includes(o))if("id"in f){const E=f.id,S=(g=f.filter)===null||g===void 0?void 0:g.event;return E&&((y=t.ids)===null||y===void 0?void 0:y.includes(E))&&(S==="*"||(S==null?void 0:S.toLocaleLowerCase())===((m=t.data)===null||m===void 0?void 0:m.type.toLocaleLowerCase()))}else{const E=(O=(T=f==null?void 0:f.filter)===null||T===void 0?void 0:T.event)===null||O===void 0?void 0:O.toLocaleLowerCase();return E==="*"||E===((x=t==null?void 0:t.event)===null||x===void 0?void 0:x.toLocaleLowerCase())}else return f.type.toLocaleLowerCase()===o}).map(f=>{if(typeof h=="object"&&"ids"in h){const g=h.data,{schema:y,table:m,commit_timestamp:T,type:O,errors:x}=g;h=Object.assign(Object.assign({},{schema:y,table:m,commit_timestamp:T,eventType:O,new:{},old:{},errors:x}),this._getPayloadRecords(g))}f.callback(h,r)})}_isClosed(){return this.state===P.closed}_isJoined(){return this.state===P.joined}_isJoining(){return this.state===P.joining}_isLeaving(){return this.state===P.leaving}_replyEventName(e){return`chan_reply_${e}`}_on(e,t,r){const i=e.toLocaleLowerCase(),n={type:i,filter:t,callback:r};return this.bindings[i]?this.bindings[i].push(n):this.bindings[i]=[n],this}_off(e,t){const r=e.toLocaleLowerCase();return this.bindings[r]=this.bindings[r].filter(i=>{var n;return!(((n=i.type)===null||n===void 0?void 0:n.toLocaleLowerCase())===r&&qe.isEqual(i.filter,t))}),this}static isEqual(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const r in e)if(e[r]!==t[r])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(e){this._on($.close,{},e)}_onError(e){this._on($.error,{},t=>e(t))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(e=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=P.joining,this.joinPush.resend(e))}_getPayloadRecords(e){const t={new:{},old:{}};return(e.type==="INSERT"||e.type==="UPDATE")&&(t.new=rt(e.columns,e.record)),(e.type==="UPDATE"||e.type==="DELETE")&&(t.old=rt(e.columns,e.old_record)),t}}const Pr=()=>{},$r=typeof WebSocket<"u",Or=`
  addEventListener("message", (e) => {
    if (e.data.event === "start") {
      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);
    }
  });`;class Ar{constructor(e,t){var r;this.accessTokenValue=null,this.apiKey=null,this.channels=[],this.endPoint="",this.httpEndpoint="",this.headers=yr,this.params={},this.timeout=Pt,this.heartbeatIntervalMs=3e4,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.ref=0,this.logger=Pr,this.conn=null,this.sendBuffer=[],this.serializer=new _r,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=n=>{let o;return n?o=n:typeof fetch>"u"?o=(...a)=>X(async()=>{const{default:l}=await Promise.resolve().then(()=>ee);return{default:l}},void 0).then(({default:l})=>l(...a)):o=fetch,(...a)=>o(...a)},this.endPoint=`${e}/${Oe.websocket}`,this.httpEndpoint=At(e),t!=null&&t.transport?this.transport=t.transport:this.transport=null,t!=null&&t.params&&(this.params=t.params),t!=null&&t.headers&&(this.headers=Object.assign(Object.assign({},this.headers),t.headers)),t!=null&&t.timeout&&(this.timeout=t.timeout),t!=null&&t.logger&&(this.logger=t.logger),t!=null&&t.heartbeatIntervalMs&&(this.heartbeatIntervalMs=t.heartbeatIntervalMs);const i=(r=t==null?void 0:t.params)===null||r===void 0?void 0:r.apikey;if(i&&(this.accessTokenValue=i,this.apiKey=i),this.reconnectAfterMs=t!=null&&t.reconnectAfterMs?t.reconnectAfterMs:n=>[1e3,2e3,5e3,1e4][n-1]||1e4,this.encode=t!=null&&t.encode?t.encode:(n,o)=>o(JSON.stringify(n)),this.decode=t!=null&&t.decode?t.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new $t(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(t==null?void 0:t.fetch),t!=null&&t.worker){if(typeof window<"u"&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(t==null?void 0:t.worker)||!1,this.workerUrl=t==null?void 0:t.workerUrl}this.accessToken=(t==null?void 0:t.accessToken)||null}connect(){if(!this.conn){if(this.transport){this.conn=new this.transport(this.endpointURL(),void 0,{headers:this.headers});return}if($r){this.conn=new WebSocket(this.endpointURL()),this.setupConnection();return}this.conn=new Cr(this.endpointURL(),void 0,{close:()=>{this.conn=null}}),X(async()=>{const{default:e}=await import("./browser-Cp0rw7js.js").then(t=>t.b);return{default:e}},[]).then(({default:e})=>{this.conn=new e(this.endpointURL(),void 0,{headers:this.headers}),this.setupConnection()})}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:br}))}disconnect(e,t){this.conn&&(this.conn.onclose=function(){},e?this.conn.close(e,t??""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset())}getChannels(){return this.channels}async removeChannel(e){const t=await e.unsubscribe();return this.channels.length===0&&this.disconnect(),t}async removeAllChannels(){const e=await Promise.all(this.channels.map(t=>t.unsubscribe()));return this.disconnect(),e}log(e,t,r){this.logger(e,t,r)}connectionState(){switch(this.conn&&this.conn.readyState){case Y.connecting:return N.Connecting;case Y.open:return N.Open;case Y.closing:return N.Closing;default:return N.Closed}}isConnected(){return this.connectionState()===N.Open}channel(e,t={config:{}}){const r=new qe(`realtime:${e}`,t,this);return this.channels.push(r),r}push(e){const{topic:t,event:r,payload:i,ref:n}=e,o=()=>{this.encode(e,a=>{var l;(l=this.conn)===null||l===void 0||l.send(a)})};this.log("push",`${t} ${r} (${n})`,i),this.isConnected()?o():this.sendBuffer.push(o)}async setAuth(e=null){let t=e||this.accessToken&&await this.accessToken()||this.accessTokenValue;if(t){let r=null;try{r=JSON.parse(atob(t.split(".")[1]))}catch{}if(r&&r.exp&&!(Math.floor(Date.now()/1e3)-r.exp<0))return this.log("auth",`InvalidJWTToken: Invalid value for JWT claim "exp" with value ${r.exp}`),Promise.reject(`InvalidJWTToken: Invalid value for JWT claim "exp" with value ${r.exp}`);this.accessTokenValue=t,this.channels.forEach(i=>{t&&i.updateJoinPayload({access_token:t}),i.joinedOnce&&i._isJoined()&&i._push($.access_token,{access_token:t})})}}async sendHeartbeat(){var e;if(this.isConnected()){if(this.pendingHeartbeatRef){this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),(e=this.conn)===null||e===void 0||e.close(wr,"hearbeat timeout");return}this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.setAuth()}}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}_makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}_leaveOpenTopic(e){let t=this.channels.find(r=>r.topic===e&&(r._isJoined()||r._isJoining()));t&&(this.log("transport",`leaving duplicate topic "${e}"`),t.unsubscribe())}_remove(e){this.channels=this.channels.filter(t=>t._joinRef()!==e._joinRef())}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=e=>this._onConnError(e),this.conn.onmessage=e=>this._onConnMessage(e),this.conn.onclose=e=>this._onConnClose(e))}_onConnMessage(e){this.decode(e.data,t=>{let{topic:r,event:i,payload:n,ref:o}=t;o&&o===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${n.status||""} ${r} ${i} ${o&&"("+o+")"||""}`,n),this.channels.filter(a=>a._isMember(r)).forEach(a=>a._trigger(i,n,o)),this.stateChangeCallbacks.message.forEach(a=>a(t))})}async _onConnOpen(){if(this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),!this.worker)this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs);else{this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const e=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(e),this.workerRef.onerror=t=>{this.log("worker","worker error",t.message),this.workerRef.terminate()},this.workerRef.onmessage=t=>{t.data.event==="keepAlive"&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}this.stateChangeCallbacks.open.forEach(e=>e())}_onConnClose(e){this.log("transport","close",e),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(t=>t(e))}_onConnError(e){this.log("transport",e.message),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(t=>t(e))}_triggerChanError(){this.channels.forEach(e=>e._trigger($.error))}_appendParams(e,t){if(Object.keys(t).length===0)return e;const r=e.match(/\?/)?"&":"?",i=new URLSearchParams(t);return`${e}${r}${i}`}_workerObjectUrl(e){let t;if(e)t=e;else{const r=new Blob([Or],{type:"application/javascript"});t=URL.createObjectURL(r)}return t}}class Cr{constructor(e,t,r){this.binaryType="arraybuffer",this.onclose=()=>{},this.onerror=()=>{},this.onmessage=()=>{},this.onopen=()=>{},this.readyState=Y.connecting,this.send=()=>{},this.url=null,this.url=e,this.close=r.close}}class Fe extends Error{constructor(e){super(e),this.__isStorageError=!0,this.name="StorageError"}}function _(s){return typeof s=="object"&&s!==null&&"__isStorageError"in s}class Lr extends Fe{constructor(e,t){super(e),this.name="StorageApiError",this.status=t}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class Ce extends Fe{constructor(e,t){super(e),this.name="StorageUnknownError",this.originalError=t}}var Ir=function(s,e,t,r){function i(n){return n instanceof t?n:new t(function(o){o(n)})}return new(t||(t=Promise))(function(n,o){function a(d){try{c(r.next(d))}catch(u){o(u)}}function l(d){try{c(r.throw(d))}catch(u){o(u)}}function c(d){d.done?n(d.value):i(d.value).then(a,l)}c((r=r.apply(s,e||[])).next())})};const Ct=s=>{let e;return s?e=s:typeof fetch>"u"?e=(...t)=>X(async()=>{const{default:r}=await Promise.resolve().then(()=>ee);return{default:r}},void 0).then(({default:r})=>r(...t)):e=fetch,(...t)=>e(...t)},Rr=()=>Ir(void 0,void 0,void 0,function*(){return typeof Response>"u"?(yield X(()=>Promise.resolve().then(()=>ee),void 0)).Response:Response}),Le=s=>{if(Array.isArray(s))return s.map(t=>Le(t));if(typeof s=="function"||s!==Object(s))return s;const e={};return Object.entries(s).forEach(([t,r])=>{const i=t.replace(/([-_][a-z])/gi,n=>n.toUpperCase().replace(/[-_]/g,""));e[i]=Le(r)}),e};var q=function(s,e,t,r){function i(n){return n instanceof t?n:new t(function(o){o(n)})}return new(t||(t=Promise))(function(n,o){function a(d){try{c(r.next(d))}catch(u){o(u)}}function l(d){try{c(r.throw(d))}catch(u){o(u)}}function c(d){d.done?n(d.value):i(d.value).then(a,l)}c((r=r.apply(s,e||[])).next())})};const Ee=s=>s.msg||s.message||s.error_description||s.error||JSON.stringify(s),Dr=(s,e,t)=>q(void 0,void 0,void 0,function*(){const r=yield Rr();s instanceof r&&!(t!=null&&t.noResolveJson)?s.json().then(i=>{e(new Lr(Ee(i),s.status||500))}).catch(i=>{e(new Ce(Ee(i),i))}):e(new Ce(Ee(s),s))}),Ur=(s,e,t,r)=>{const i={method:s,headers:(e==null?void 0:e.headers)||{}};return s==="GET"?i:(i.headers=Object.assign({"Content-Type":"application/json"},e==null?void 0:e.headers),r&&(i.body=JSON.stringify(r)),Object.assign(Object.assign({},i),t))};function ue(s,e,t,r,i,n){return q(this,void 0,void 0,function*(){return new Promise((o,a)=>{s(t,Ur(e,r,i,n)).then(l=>{if(!l.ok)throw l;return r!=null&&r.noResolveJson?l:l.json()}).then(l=>o(l)).catch(l=>Dr(l,a,r))})})}function be(s,e,t,r){return q(this,void 0,void 0,function*(){return ue(s,"GET",e,t,r)})}function R(s,e,t,r,i){return q(this,void 0,void 0,function*(){return ue(s,"POST",e,r,i,t)})}function Mr(s,e,t,r,i){return q(this,void 0,void 0,function*(){return ue(s,"PUT",e,r,i,t)})}function Br(s,e,t,r){return q(this,void 0,void 0,function*(){return ue(s,"HEAD",e,Object.assign(Object.assign({},t),{noResolveJson:!0}),r)})}function Lt(s,e,t,r,i){return q(this,void 0,void 0,function*(){return ue(s,"DELETE",e,r,i,t)})}var j=function(s,e,t,r){function i(n){return n instanceof t?n:new t(function(o){o(n)})}return new(t||(t=Promise))(function(n,o){function a(d){try{c(r.next(d))}catch(u){o(u)}}function l(d){try{c(r.throw(d))}catch(u){o(u)}}function c(d){d.done?n(d.value):i(d.value).then(a,l)}c((r=r.apply(s,e||[])).next())})};const Nr={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},ot={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class qr{constructor(e,t={},r,i){this.url=e,this.headers=t,this.bucketId=r,this.fetch=Ct(i)}uploadOrUpdate(e,t,r,i){return j(this,void 0,void 0,function*(){try{let n;const o=Object.assign(Object.assign({},ot),i);let a=Object.assign(Object.assign({},this.headers),e==="POST"&&{"x-upsert":String(o.upsert)});const l=o.metadata;typeof Blob<"u"&&r instanceof Blob?(n=new FormData,n.append("cacheControl",o.cacheControl),l&&n.append("metadata",this.encodeMetadata(l)),n.append("",r)):typeof FormData<"u"&&r instanceof FormData?(n=r,n.append("cacheControl",o.cacheControl),l&&n.append("metadata",this.encodeMetadata(l))):(n=r,a["cache-control"]=`max-age=${o.cacheControl}`,a["content-type"]=o.contentType,l&&(a["x-metadata"]=this.toBase64(this.encodeMetadata(l)))),i!=null&&i.headers&&(a=Object.assign(Object.assign({},a),i.headers));const c=this._removeEmptyFolders(t),d=this._getFinalPath(c),u=yield this.fetch(`${this.url}/object/${d}`,Object.assign({method:e,body:n,headers:a},o!=null&&o.duplex?{duplex:o.duplex}:{})),h=yield u.json();return u.ok?{data:{path:c,id:h.Id,fullPath:h.Key},error:null}:{data:null,error:h}}catch(n){if(_(n))return{data:null,error:n};throw n}})}upload(e,t,r){return j(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",e,t,r)})}uploadToSignedUrl(e,t,r,i){return j(this,void 0,void 0,function*(){const n=this._removeEmptyFolders(e),o=this._getFinalPath(n),a=new URL(this.url+`/object/upload/sign/${o}`);a.searchParams.set("token",t);try{let l;const c=Object.assign({upsert:ot.upsert},i),d=Object.assign(Object.assign({},this.headers),{"x-upsert":String(c.upsert)});typeof Blob<"u"&&r instanceof Blob?(l=new FormData,l.append("cacheControl",c.cacheControl),l.append("",r)):typeof FormData<"u"&&r instanceof FormData?(l=r,l.append("cacheControl",c.cacheControl)):(l=r,d["cache-control"]=`max-age=${c.cacheControl}`,d["content-type"]=c.contentType);const u=yield this.fetch(a.toString(),{method:"PUT",body:l,headers:d}),h=yield u.json();return u.ok?{data:{path:n,fullPath:h.Key},error:null}:{data:null,error:h}}catch(l){if(_(l))return{data:null,error:l};throw l}})}createSignedUploadUrl(e,t){return j(this,void 0,void 0,function*(){try{let r=this._getFinalPath(e);const i=Object.assign({},this.headers);t!=null&&t.upsert&&(i["x-upsert"]="true");const n=yield R(this.fetch,`${this.url}/object/upload/sign/${r}`,{},{headers:i}),o=new URL(this.url+n.url),a=o.searchParams.get("token");if(!a)throw new Fe("No token returned by API");return{data:{signedUrl:o.toString(),path:e,token:a},error:null}}catch(r){if(_(r))return{data:null,error:r};throw r}})}update(e,t,r){return j(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",e,t,r)})}move(e,t,r){return j(this,void 0,void 0,function*(){try{return{data:yield R(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:r==null?void 0:r.destinationBucket},{headers:this.headers}),error:null}}catch(i){if(_(i))return{data:null,error:i};throw i}})}copy(e,t,r){return j(this,void 0,void 0,function*(){try{return{data:{path:(yield R(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:r==null?void 0:r.destinationBucket},{headers:this.headers})).Key},error:null}}catch(i){if(_(i))return{data:null,error:i};throw i}})}createSignedUrl(e,t,r){return j(this,void 0,void 0,function*(){try{let i=this._getFinalPath(e),n=yield R(this.fetch,`${this.url}/object/sign/${i}`,Object.assign({expiresIn:t},r!=null&&r.transform?{transform:r.transform}:{}),{headers:this.headers});const o=r!=null&&r.download?`&download=${r.download===!0?"":r.download}`:"";return n={signedUrl:encodeURI(`${this.url}${n.signedURL}${o}`)},{data:n,error:null}}catch(i){if(_(i))return{data:null,error:i};throw i}})}createSignedUrls(e,t,r){return j(this,void 0,void 0,function*(){try{const i=yield R(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:t,paths:e},{headers:this.headers}),n=r!=null&&r.download?`&download=${r.download===!0?"":r.download}`:"";return{data:i.map(o=>Object.assign(Object.assign({},o),{signedUrl:o.signedURL?encodeURI(`${this.url}${o.signedURL}${n}`):null})),error:null}}catch(i){if(_(i))return{data:null,error:i};throw i}})}download(e,t){return j(this,void 0,void 0,function*(){const i=typeof(t==null?void 0:t.transform)<"u"?"render/image/authenticated":"object",n=this.transformOptsToQueryString((t==null?void 0:t.transform)||{}),o=n?`?${n}`:"";try{const a=this._getFinalPath(e);return{data:yield(yield be(this.fetch,`${this.url}/${i}/${a}${o}`,{headers:this.headers,noResolveJson:!0})).blob(),error:null}}catch(a){if(_(a))return{data:null,error:a};throw a}})}info(e){return j(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{const r=yield be(this.fetch,`${this.url}/object/info/${t}`,{headers:this.headers});return{data:Le(r),error:null}}catch(r){if(_(r))return{data:null,error:r};throw r}})}exists(e){return j(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{return yield Br(this.fetch,`${this.url}/object/${t}`,{headers:this.headers}),{data:!0,error:null}}catch(r){if(_(r)&&r instanceof Ce){const i=r.originalError;if([400,404].includes(i==null?void 0:i.status))return{data:!1,error:r}}throw r}})}getPublicUrl(e,t){const r=this._getFinalPath(e),i=[],n=t!=null&&t.download?`download=${t.download===!0?"":t.download}`:"";n!==""&&i.push(n);const a=typeof(t==null?void 0:t.transform)<"u"?"render/image":"object",l=this.transformOptsToQueryString((t==null?void 0:t.transform)||{});l!==""&&i.push(l);let c=i.join("&");return c!==""&&(c=`?${c}`),{data:{publicUrl:encodeURI(`${this.url}/${a}/public/${r}${c}`)}}}remove(e){return j(this,void 0,void 0,function*(){try{return{data:yield Lt(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:e},{headers:this.headers}),error:null}}catch(t){if(_(t))return{data:null,error:t};throw t}})}list(e,t,r){return j(this,void 0,void 0,function*(){try{const i=Object.assign(Object.assign(Object.assign({},Nr),t),{prefix:e||""});return{data:yield R(this.fetch,`${this.url}/object/list/${this.bucketId}`,i,{headers:this.headers},r),error:null}}catch(i){if(_(i))return{data:null,error:i};throw i}})}encodeMetadata(e){return JSON.stringify(e)}toBase64(e){return typeof Buffer<"u"?Buffer.from(e).toString("base64"):btoa(e)}_getFinalPath(e){return`${this.bucketId}/${e}`}_removeEmptyFolders(e){return e.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(e){const t=[];return e.width&&t.push(`width=${e.width}`),e.height&&t.push(`height=${e.height}`),e.resize&&t.push(`resize=${e.resize}`),e.format&&t.push(`format=${e.format}`),e.quality&&t.push(`quality=${e.quality}`),t.join("&")}}const Fr="2.7.1",zr={"X-Client-Info":`storage-js/${Fr}`};var K=function(s,e,t,r){function i(n){return n instanceof t?n:new t(function(o){o(n)})}return new(t||(t=Promise))(function(n,o){function a(d){try{c(r.next(d))}catch(u){o(u)}}function l(d){try{c(r.throw(d))}catch(u){o(u)}}function c(d){d.done?n(d.value):i(d.value).then(a,l)}c((r=r.apply(s,e||[])).next())})};class Hr{constructor(e,t={},r){this.url=e,this.headers=Object.assign(Object.assign({},zr),t),this.fetch=Ct(r)}listBuckets(){return K(this,void 0,void 0,function*(){try{return{data:yield be(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(e){if(_(e))return{data:null,error:e};throw e}})}getBucket(e){return K(this,void 0,void 0,function*(){try{return{data:yield be(this.fetch,`${this.url}/bucket/${e}`,{headers:this.headers}),error:null}}catch(t){if(_(t))return{data:null,error:t};throw t}})}createBucket(e,t={public:!1}){return K(this,void 0,void 0,function*(){try{return{data:yield R(this.fetch,`${this.url}/bucket`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers}),error:null}}catch(r){if(_(r))return{data:null,error:r};throw r}})}updateBucket(e,t){return K(this,void 0,void 0,function*(){try{return{data:yield Mr(this.fetch,`${this.url}/bucket/${e}`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers}),error:null}}catch(r){if(_(r))return{data:null,error:r};throw r}})}emptyBucket(e){return K(this,void 0,void 0,function*(){try{return{data:yield R(this.fetch,`${this.url}/bucket/${e}/empty`,{},{headers:this.headers}),error:null}}catch(t){if(_(t))return{data:null,error:t};throw t}})}deleteBucket(e){return K(this,void 0,void 0,function*(){try{return{data:yield Lt(this.fetch,`${this.url}/bucket/${e}`,{},{headers:this.headers}),error:null}}catch(t){if(_(t))return{data:null,error:t};throw t}})}}class Jr extends Hr{constructor(e,t={},r){super(e,t,r)}from(e){return new qr(this.url,this.headers,e,this.fetch)}}const Gr="2.49.4";let ne="";typeof Deno<"u"?ne="deno":typeof document<"u"?ne="web":typeof navigator<"u"&&navigator.product==="ReactNative"?ne="react-native":ne="node";const Kr={"X-Client-Info":`supabase-js-${ne}/${Gr}`},Vr={headers:Kr},Wr={schema:"public"},Qr={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},Yr={};var Xr=function(s,e,t,r){function i(n){return n instanceof t?n:new t(function(o){o(n)})}return new(t||(t=Promise))(function(n,o){function a(d){try{c(r.next(d))}catch(u){o(u)}}function l(d){try{c(r.throw(d))}catch(u){o(u)}}function c(d){d.done?n(d.value):i(d.value).then(a,l)}c((r=r.apply(s,e||[])).next())})};const Zr=s=>{let e;return s?e=s:typeof fetch>"u"?e=kt:e=fetch,(...t)=>e(...t)},es=()=>typeof Headers>"u"?xt:Headers,ts=(s,e,t)=>{const r=Zr(t),i=es();return(n,o)=>Xr(void 0,void 0,void 0,function*(){var a;const l=(a=yield e())!==null&&a!==void 0?a:s;let c=new i(o==null?void 0:o.headers);return c.has("apikey")||c.set("apikey",s),c.has("Authorization")||c.set("Authorization",`Bearer ${l}`),r(n,Object.assign(Object.assign({},o),{headers:c}))})};var rs=function(s,e,t,r){function i(n){return n instanceof t?n:new t(function(o){o(n)})}return new(t||(t=Promise))(function(n,o){function a(d){try{c(r.next(d))}catch(u){o(u)}}function l(d){try{c(r.throw(d))}catch(u){o(u)}}function c(d){d.done?n(d.value):i(d.value).then(a,l)}c((r=r.apply(s,e||[])).next())})};function ss(s){return s.replace(/\/$/,"")}function is(s,e){const{db:t,auth:r,realtime:i,global:n}=s,{db:o,auth:a,realtime:l,global:c}=e,d={db:Object.assign(Object.assign({},o),t),auth:Object.assign(Object.assign({},a),r),realtime:Object.assign(Object.assign({},l),i),global:Object.assign(Object.assign({},c),n),accessToken:()=>rs(this,void 0,void 0,function*(){return""})};return s.accessToken?d.accessToken=s.accessToken:delete d.accessToken,d}const It="2.69.1",Q=30*1e3,Ie=3,Se=Ie*Q,ns="http://localhost:9999",os="supabase.auth.token",as={"X-Client-Info":`gotrue-js/${It}`},Re="X-Supabase-Api-Version",Rt={"2024-01-01":{timestamp:Date.parse("2024-01-01T00:00:00.0Z"),name:"2024-01-01"}},ls=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i,cs=6e5;class ze extends Error{constructor(e,t,r){super(e),this.__isAuthError=!0,this.name="AuthError",this.status=t,this.code=r}}function p(s){return typeof s=="object"&&s!==null&&"__isAuthError"in s}class ds extends ze{constructor(e,t,r){super(e,t,r),this.name="AuthApiError",this.status=t,this.code=r}}function us(s){return p(s)&&s.name==="AuthApiError"}class Dt extends ze{constructor(e,t){super(e),this.name="AuthUnknownError",this.originalError=t}}class U extends ze{constructor(e,t,r,i){super(e,r,i),this.name=t,this.status=r}}class L extends U{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}function hs(s){return p(s)&&s.name==="AuthSessionMissingError"}class Te extends U{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class ge extends U{constructor(e){super(e,"AuthInvalidCredentialsError",400,void 0)}}class pe extends U{constructor(e,t=null){super(e,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}function fs(s){return p(s)&&s.name==="AuthImplicitGrantRedirectError"}class at extends U{constructor(e,t=null){super(e,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class De extends U{constructor(e,t){super(e,"AuthRetryableFetchError",t,void 0)}}function je(s){return p(s)&&s.name==="AuthRetryableFetchError"}class lt extends U{constructor(e,t,r){super(e,"AuthWeakPasswordError",t,"weak_password"),this.reasons=r}}class ae extends U{constructor(e){super(e,"AuthInvalidJwtError",400,"invalid_jwt")}}const ct="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),dt=` 	
\r=`.split(""),gs=(()=>{const s=new Array(128);for(let e=0;e<s.length;e+=1)s[e]=-1;for(let e=0;e<dt.length;e+=1)s[dt[e].charCodeAt(0)]=-2;for(let e=0;e<ct.length;e+=1)s[ct[e].charCodeAt(0)]=e;return s})();function Ut(s,e,t){const r=gs[s];if(r>-1)for(e.queue=e.queue<<6|r,e.queuedBits+=6;e.queuedBits>=8;)t(e.queue>>e.queuedBits-8&255),e.queuedBits-=8;else{if(r===-2)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(s)}"`)}}function ut(s){const e=[],t=o=>{e.push(String.fromCodePoint(o))},r={utf8seq:0,codepoint:0},i={queue:0,queuedBits:0},n=o=>{vs(o,r,t)};for(let o=0;o<s.length;o+=1)Ut(s.charCodeAt(o),i,n);return e.join("")}function ps(s,e){if(s<=127){e(s);return}else if(s<=2047){e(192|s>>6),e(128|s&63);return}else if(s<=65535){e(224|s>>12),e(128|s>>6&63),e(128|s&63);return}else if(s<=1114111){e(240|s>>18),e(128|s>>12&63),e(128|s>>6&63),e(128|s&63);return}throw new Error(`Unrecognized Unicode codepoint: ${s.toString(16)}`)}function ms(s,e){for(let t=0;t<s.length;t+=1){let r=s.charCodeAt(t);if(r>55295&&r<=56319){const i=(r-55296)*1024&65535;r=(s.charCodeAt(t+1)-56320&65535|i)+65536,t+=1}ps(r,e)}}function vs(s,e,t){if(e.utf8seq===0){if(s<=127){t(s);return}for(let r=1;r<6;r+=1)if((s>>7-r&1)===0){e.utf8seq=r;break}if(e.utf8seq===2)e.codepoint=s&31;else if(e.utf8seq===3)e.codepoint=s&15;else if(e.utf8seq===4)e.codepoint=s&7;else throw new Error("Invalid UTF-8 sequence");e.utf8seq-=1}else if(e.utf8seq>0){if(s<=127)throw new Error("Invalid UTF-8 sequence");e.codepoint=e.codepoint<<6|s&63,e.utf8seq-=1,e.utf8seq===0&&t(e.codepoint)}}function ys(s){const e=[],t={queue:0,queuedBits:0},r=i=>{e.push(i)};for(let i=0;i<s.length;i+=1)Ut(s.charCodeAt(i),t,r);return new Uint8Array(e)}function bs(s){const e=[];return ms(s,t=>e.push(t)),new Uint8Array(e)}function ws(s){return Math.round(Date.now()/1e3)+s}function _s(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(s){const e=Math.random()*16|0;return(s=="x"?e:e&3|8).toString(16)})}const A=()=>typeof window<"u"&&typeof document<"u",M={tested:!1,writable:!1},le=()=>{if(!A())return!1;try{if(typeof globalThis.localStorage!="object")return!1}catch{return!1}if(M.tested)return M.writable;const s=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(s,s),globalThis.localStorage.removeItem(s),M.tested=!0,M.writable=!0}catch{M.tested=!0,M.writable=!1}return M.writable};function ks(s){const e={},t=new URL(s);if(t.hash&&t.hash[0]==="#")try{new URLSearchParams(t.hash.substring(1)).forEach((i,n)=>{e[n]=i})}catch{}return t.searchParams.forEach((r,i)=>{e[i]=r}),e}const Mt=s=>{let e;return s?e=s:typeof fetch>"u"?e=(...t)=>X(async()=>{const{default:r}=await Promise.resolve().then(()=>ee);return{default:r}},void 0).then(({default:r})=>r(...t)):e=fetch,(...t)=>e(...t)},xs=s=>typeof s=="object"&&s!==null&&"status"in s&&"ok"in s&&"json"in s&&typeof s.json=="function",Bt=async(s,e,t)=>{await s.setItem(e,JSON.stringify(t))},me=async(s,e)=>{const t=await s.getItem(e);if(!t)return null;try{return JSON.parse(t)}catch{return t}},ve=async(s,e)=>{await s.removeItem(e)};class we{constructor(){this.promise=new we.promiseConstructor((e,t)=>{this.resolve=e,this.reject=t})}}we.promiseConstructor=Promise;function Pe(s){const e=s.split(".");if(e.length!==3)throw new ae("Invalid JWT structure");for(let r=0;r<e.length;r++)if(!ls.test(e[r]))throw new ae("JWT not in base64url format");return{header:JSON.parse(ut(e[0])),payload:JSON.parse(ut(e[1])),signature:ys(e[2]),raw:{header:e[0],payload:e[1]}}}async function Es(s){return await new Promise(e=>{setTimeout(()=>e(null),s)})}function Ss(s,e){return new Promise((r,i)=>{(async()=>{for(let n=0;n<1/0;n++)try{const o=await s(n);if(!e(n,null,o)){r(o);return}}catch(o){if(!e(n,o)){i(o);return}}})()})}function Ts(s){return("0"+s.toString(16)).substr(-2)}function js(){const e=new Uint32Array(56);if(typeof crypto>"u"){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",r=t.length;let i="";for(let n=0;n<56;n++)i+=t.charAt(Math.floor(Math.random()*r));return i}return crypto.getRandomValues(e),Array.from(e,Ts).join("")}async function Ps(s){const t=new TextEncoder().encode(s),r=await crypto.subtle.digest("SHA-256",t),i=new Uint8Array(r);return Array.from(i).map(n=>String.fromCharCode(n)).join("")}async function $s(s){if(!(typeof crypto<"u"&&typeof crypto.subtle<"u"&&typeof TextEncoder<"u"))return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),s;const t=await Ps(s);return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}async function V(s,e,t=!1){const r=js();let i=r;t&&(i+="/PASSWORD_RECOVERY"),await Bt(s,`${e}-code-verifier`,i);const n=await $s(r);return[n,r===n?"plain":"s256"]}const Os=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;function As(s){const e=s.headers.get(Re);if(!e||!e.match(Os))return null;try{return new Date(`${e}T00:00:00.0Z`)}catch{return null}}function Cs(s){if(!s)throw new Error("Missing exp claim");const e=Math.floor(Date.now()/1e3);if(s<=e)throw new Error("JWT has expired")}function Ls(s){switch(s){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}var Is=function(s,e){var t={};for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&e.indexOf(r)<0&&(t[r]=s[r]);if(s!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(s);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(s,r[i])&&(t[r[i]]=s[r[i]]);return t};const B=s=>s.msg||s.message||s.error_description||s.error||JSON.stringify(s),Rs=[502,503,504];async function ht(s){var e;if(!xs(s))throw new De(B(s),0);if(Rs.includes(s.status))throw new De(B(s),s.status);let t;try{t=await s.json()}catch(n){throw new Dt(B(n),n)}let r;const i=As(s);if(i&&i.getTime()>=Rt["2024-01-01"].timestamp&&typeof t=="object"&&t&&typeof t.code=="string"?r=t.code:typeof t=="object"&&t&&typeof t.error_code=="string"&&(r=t.error_code),r){if(r==="weak_password")throw new lt(B(t),s.status,((e=t.weak_password)===null||e===void 0?void 0:e.reasons)||[]);if(r==="session_not_found")throw new L}else if(typeof t=="object"&&t&&typeof t.weak_password=="object"&&t.weak_password&&Array.isArray(t.weak_password.reasons)&&t.weak_password.reasons.length&&t.weak_password.reasons.reduce((n,o)=>n&&typeof o=="string",!0))throw new lt(B(t),s.status,t.weak_password.reasons);throw new ds(B(t),s.status||500,r)}const Ds=(s,e,t,r)=>{const i={method:s,headers:(e==null?void 0:e.headers)||{}};return s==="GET"?i:(i.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},e==null?void 0:e.headers),i.body=JSON.stringify(r),Object.assign(Object.assign({},i),t))};async function v(s,e,t,r){var i;const n=Object.assign({},r==null?void 0:r.headers);n[Re]||(n[Re]=Rt["2024-01-01"].name),r!=null&&r.jwt&&(n.Authorization=`Bearer ${r.jwt}`);const o=(i=r==null?void 0:r.query)!==null&&i!==void 0?i:{};r!=null&&r.redirectTo&&(o.redirect_to=r.redirectTo);const a=Object.keys(o).length?"?"+new URLSearchParams(o).toString():"",l=await Us(s,e,t+a,{headers:n,noResolveJson:r==null?void 0:r.noResolveJson},{},r==null?void 0:r.body);return r!=null&&r.xform?r==null?void 0:r.xform(l):{data:Object.assign({},l),error:null}}async function Us(s,e,t,r,i,n){const o=Ds(e,r,i,n);let a;try{a=await s(t,Object.assign({},o))}catch(l){throw console.error(l),new De(B(l),0)}if(a.ok||await ht(a),r!=null&&r.noResolveJson)return a;try{return await a.json()}catch(l){await ht(l)}}function I(s){var e;let t=null;qs(s)&&(t=Object.assign({},s),s.expires_at||(t.expires_at=ws(s.expires_in)));const r=(e=s.user)!==null&&e!==void 0?e:s;return{data:{session:t,user:r},error:null}}function ft(s){const e=I(s);return!e.error&&s.weak_password&&typeof s.weak_password=="object"&&Array.isArray(s.weak_password.reasons)&&s.weak_password.reasons.length&&s.weak_password.message&&typeof s.weak_password.message=="string"&&s.weak_password.reasons.reduce((t,r)=>t&&typeof r=="string",!0)&&(e.data.weak_password=s.weak_password),e}function D(s){var e;return{data:{user:(e=s.user)!==null&&e!==void 0?e:s},error:null}}function Ms(s){return{data:s,error:null}}function Bs(s){const{action_link:e,email_otp:t,hashed_token:r,redirect_to:i,verification_type:n}=s,o=Is(s,["action_link","email_otp","hashed_token","redirect_to","verification_type"]),a={action_link:e,email_otp:t,hashed_token:r,redirect_to:i,verification_type:n},l=Object.assign({},o);return{data:{properties:a,user:l},error:null}}function Ns(s){return s}function qs(s){return s.access_token&&s.refresh_token&&s.expires_in}var Fs=function(s,e){var t={};for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&e.indexOf(r)<0&&(t[r]=s[r]);if(s!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(s);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(s,r[i])&&(t[r[i]]=s[r[i]]);return t};class zs{constructor({url:e="",headers:t={},fetch:r}){this.url=e,this.headers=t,this.fetch=Mt(r),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(e,t="global"){try{return await v(this.fetch,"POST",`${this.url}/logout?scope=${t}`,{headers:this.headers,jwt:e,noResolveJson:!0}),{data:null,error:null}}catch(r){if(p(r))return{data:null,error:r};throw r}}async inviteUserByEmail(e,t={}){try{return await v(this.fetch,"POST",`${this.url}/invite`,{body:{email:e,data:t.data},headers:this.headers,redirectTo:t.redirectTo,xform:D})}catch(r){if(p(r))return{data:{user:null},error:r};throw r}}async generateLink(e){try{const{options:t}=e,r=Fs(e,["options"]),i=Object.assign(Object.assign({},r),t);return"newEmail"in r&&(i.new_email=r==null?void 0:r.newEmail,delete i.newEmail),await v(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:i,headers:this.headers,xform:Bs,redirectTo:t==null?void 0:t.redirectTo})}catch(t){if(p(t))return{data:{properties:null,user:null},error:t};throw t}}async createUser(e){try{return await v(this.fetch,"POST",`${this.url}/admin/users`,{body:e,headers:this.headers,xform:D})}catch(t){if(p(t))return{data:{user:null},error:t};throw t}}async listUsers(e){var t,r,i,n,o,a,l;try{const c={nextPage:null,lastPage:0,total:0},d=await v(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:(r=(t=e==null?void 0:e.page)===null||t===void 0?void 0:t.toString())!==null&&r!==void 0?r:"",per_page:(n=(i=e==null?void 0:e.perPage)===null||i===void 0?void 0:i.toString())!==null&&n!==void 0?n:""},xform:Ns});if(d.error)throw d.error;const u=await d.json(),h=(o=d.headers.get("x-total-count"))!==null&&o!==void 0?o:0,f=(l=(a=d.headers.get("link"))===null||a===void 0?void 0:a.split(","))!==null&&l!==void 0?l:[];return f.length>0&&(f.forEach(g=>{const y=parseInt(g.split(";")[0].split("=")[1].substring(0,1)),m=JSON.parse(g.split(";")[1].split("=")[1]);c[`${m}Page`]=y}),c.total=parseInt(h)),{data:Object.assign(Object.assign({},u),c),error:null}}catch(c){if(p(c))return{data:{users:[]},error:c};throw c}}async getUserById(e){try{return await v(this.fetch,"GET",`${this.url}/admin/users/${e}`,{headers:this.headers,xform:D})}catch(t){if(p(t))return{data:{user:null},error:t};throw t}}async updateUserById(e,t){try{return await v(this.fetch,"PUT",`${this.url}/admin/users/${e}`,{body:t,headers:this.headers,xform:D})}catch(r){if(p(r))return{data:{user:null},error:r};throw r}}async deleteUser(e,t=!1){try{return await v(this.fetch,"DELETE",`${this.url}/admin/users/${e}`,{headers:this.headers,body:{should_soft_delete:t},xform:D})}catch(r){if(p(r))return{data:{user:null},error:r};throw r}}async _listFactors(e){try{const{data:t,error:r}=await v(this.fetch,"GET",`${this.url}/admin/users/${e.userId}/factors`,{headers:this.headers,xform:i=>({data:{factors:i},error:null})});return{data:t,error:r}}catch(t){if(p(t))return{data:null,error:t};throw t}}async _deleteFactor(e){try{return{data:await v(this.fetch,"DELETE",`${this.url}/admin/users/${e.userId}/factors/${e.id}`,{headers:this.headers}),error:null}}catch(t){if(p(t))return{data:null,error:t};throw t}}}const Hs={getItem:s=>le()?globalThis.localStorage.getItem(s):null,setItem:(s,e)=>{le()&&globalThis.localStorage.setItem(s,e)},removeItem:s=>{le()&&globalThis.localStorage.removeItem(s)}};function gt(s={}){return{getItem:e=>s[e]||null,setItem:(e,t)=>{s[e]=t},removeItem:e=>{delete s[e]}}}function Js(){if(typeof globalThis!="object")try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch{typeof self<"u"&&(self.globalThis=self)}}const W={debug:!!(globalThis&&le()&&globalThis.localStorage&&globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug")==="true")};class Nt extends Error{constructor(e){super(e),this.isAcquireTimeout=!0}}class Gs extends Nt{}async function Ks(s,e,t){W.debug&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",s,e);const r=new globalThis.AbortController;return e>0&&setTimeout(()=>{r.abort(),W.debug&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",s)},e),await Promise.resolve().then(()=>globalThis.navigator.locks.request(s,e===0?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:r.signal},async i=>{if(i){W.debug&&console.log("@supabase/gotrue-js: navigatorLock: acquired",s,i.name);try{return await t()}finally{W.debug&&console.log("@supabase/gotrue-js: navigatorLock: released",s,i.name)}}else{if(e===0)throw W.debug&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",s),new Gs(`Acquiring an exclusive Navigator LockManager lock "${s}" immediately failed`);if(W.debug)try{const n=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(n,null,"  "))}catch(n){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",n)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await t()}}))}Js();const Vs={url:ns,storageKey:os,autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:as,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function pt(s,e,t){return await t()}class ce{constructor(e){var t,r;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=ce.nextInstanceID,ce.nextInstanceID+=1,this.instanceID>0&&A()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const i=Object.assign(Object.assign({},Vs),e);if(this.logDebugMessages=!!i.debug,typeof i.debug=="function"&&(this.logger=i.debug),this.persistSession=i.persistSession,this.storageKey=i.storageKey,this.autoRefreshToken=i.autoRefreshToken,this.admin=new zs({url:i.url,headers:i.headers,fetch:i.fetch}),this.url=i.url,this.headers=i.headers,this.fetch=Mt(i.fetch),this.lock=i.lock||pt,this.detectSessionInUrl=i.detectSessionInUrl,this.flowType=i.flowType,this.hasCustomAuthorizationHeader=i.hasCustomAuthorizationHeader,i.lock?this.lock=i.lock:A()&&(!((t=globalThis==null?void 0:globalThis.navigator)===null||t===void 0)&&t.locks)?this.lock=Ks:this.lock=pt,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?i.storage?this.storage=i.storage:le()?this.storage=Hs:(this.memoryStorage={},this.storage=gt(this.memoryStorage)):(this.memoryStorage={},this.storage=gt(this.memoryStorage)),A()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(n){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",n)}(r=this.broadcastChannel)===null||r===void 0||r.addEventListener("message",async n=>{this._debug("received broadcast notification from other tab or client",n),await this._notifyAllSubscribers(n.data.event,n.data.session,!1)})}this.initialize()}_debug(...e){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${It}) ${new Date().toISOString()}`,...e),this}async initialize(){return this.initializePromise?await this.initializePromise:(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))(),await this.initializePromise)}async _initialize(){var e;try{const t=ks(window.location.href);let r="none";if(this._isImplicitGrantCallback(t)?r="implicit":await this._isPKCECallback(t)&&(r="pkce"),A()&&this.detectSessionInUrl&&r!=="none"){const{data:i,error:n}=await this._getSessionFromURL(t,r);if(n){if(this._debug("#_initialize()","error detecting session from URL",n),fs(n)){const l=(e=n.details)===null||e===void 0?void 0:e.code;if(l==="identity_already_exists"||l==="identity_not_found"||l==="single_identity_not_deletable")return{error:n}}return await this._removeSession(),{error:n}}const{session:o,redirectType:a}=i;return this._debug("#_initialize()","detected session in URL",o,"redirect type",a),await this._saveSession(o),setTimeout(async()=>{a==="recovery"?await this._notifyAllSubscribers("PASSWORD_RECOVERY",o):await this._notifyAllSubscribers("SIGNED_IN",o)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(t){return p(t)?{error:t}:{error:new Dt("Unexpected error during initialization",t)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(e){var t,r,i;try{const n=await v(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:(r=(t=e==null?void 0:e.options)===null||t===void 0?void 0:t.data)!==null&&r!==void 0?r:{},gotrue_meta_security:{captcha_token:(i=e==null?void 0:e.options)===null||i===void 0?void 0:i.captchaToken}},xform:I}),{data:o,error:a}=n;if(a||!o)return{data:{user:null,session:null},error:a};const l=o.session,c=o.user;return o.session&&(await this._saveSession(o.session),await this._notifyAllSubscribers("SIGNED_IN",l)),{data:{user:c,session:l},error:null}}catch(n){if(p(n))return{data:{user:null,session:null},error:n};throw n}}async signUp(e){var t,r,i;try{let n;if("email"in e){const{email:d,password:u,options:h}=e;let f=null,g=null;this.flowType==="pkce"&&([f,g]=await V(this.storage,this.storageKey)),n=await v(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:h==null?void 0:h.emailRedirectTo,body:{email:d,password:u,data:(t=h==null?void 0:h.data)!==null&&t!==void 0?t:{},gotrue_meta_security:{captcha_token:h==null?void 0:h.captchaToken},code_challenge:f,code_challenge_method:g},xform:I})}else if("phone"in e){const{phone:d,password:u,options:h}=e;n=await v(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:d,password:u,data:(r=h==null?void 0:h.data)!==null&&r!==void 0?r:{},channel:(i=h==null?void 0:h.channel)!==null&&i!==void 0?i:"sms",gotrue_meta_security:{captcha_token:h==null?void 0:h.captchaToken}},xform:I})}else throw new ge("You must provide either an email or phone number and a password");const{data:o,error:a}=n;if(a||!o)return{data:{user:null,session:null},error:a};const l=o.session,c=o.user;return o.session&&(await this._saveSession(o.session),await this._notifyAllSubscribers("SIGNED_IN",l)),{data:{user:c,session:l},error:null}}catch(n){if(p(n))return{data:{user:null,session:null},error:n};throw n}}async signInWithPassword(e){try{let t;if("email"in e){const{email:n,password:o,options:a}=e;t=await v(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:n,password:o,gotrue_meta_security:{captcha_token:a==null?void 0:a.captchaToken}},xform:ft})}else if("phone"in e){const{phone:n,password:o,options:a}=e;t=await v(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:n,password:o,gotrue_meta_security:{captcha_token:a==null?void 0:a.captchaToken}},xform:ft})}else throw new ge("You must provide either an email or phone number and a password");const{data:r,error:i}=t;return i?{data:{user:null,session:null},error:i}:!r||!r.session||!r.user?{data:{user:null,session:null},error:new Te}:(r.session&&(await this._saveSession(r.session),await this._notifyAllSubscribers("SIGNED_IN",r.session)),{data:Object.assign({user:r.user,session:r.session},r.weak_password?{weakPassword:r.weak_password}:null),error:i})}catch(t){if(p(t))return{data:{user:null,session:null},error:t};throw t}}async signInWithOAuth(e){var t,r,i,n;return await this._handleProviderSignIn(e.provider,{redirectTo:(t=e.options)===null||t===void 0?void 0:t.redirectTo,scopes:(r=e.options)===null||r===void 0?void 0:r.scopes,queryParams:(i=e.options)===null||i===void 0?void 0:i.queryParams,skipBrowserRedirect:(n=e.options)===null||n===void 0?void 0:n.skipBrowserRedirect})}async exchangeCodeForSession(e){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(e))}async _exchangeCodeForSession(e){const t=await me(this.storage,`${this.storageKey}-code-verifier`),[r,i]=(t??"").split("/");try{const{data:n,error:o}=await v(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:e,code_verifier:r},xform:I});if(await ve(this.storage,`${this.storageKey}-code-verifier`),o)throw o;return!n||!n.session||!n.user?{data:{user:null,session:null,redirectType:null},error:new Te}:(n.session&&(await this._saveSession(n.session),await this._notifyAllSubscribers("SIGNED_IN",n.session)),{data:Object.assign(Object.assign({},n),{redirectType:i??null}),error:o})}catch(n){if(p(n))return{data:{user:null,session:null,redirectType:null},error:n};throw n}}async signInWithIdToken(e){try{const{options:t,provider:r,token:i,access_token:n,nonce:o}=e,a=await v(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:r,id_token:i,access_token:n,nonce:o,gotrue_meta_security:{captcha_token:t==null?void 0:t.captchaToken}},xform:I}),{data:l,error:c}=a;return c?{data:{user:null,session:null},error:c}:!l||!l.session||!l.user?{data:{user:null,session:null},error:new Te}:(l.session&&(await this._saveSession(l.session),await this._notifyAllSubscribers("SIGNED_IN",l.session)),{data:l,error:c})}catch(t){if(p(t))return{data:{user:null,session:null},error:t};throw t}}async signInWithOtp(e){var t,r,i,n,o;try{if("email"in e){const{email:a,options:l}=e;let c=null,d=null;this.flowType==="pkce"&&([c,d]=await V(this.storage,this.storageKey));const{error:u}=await v(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:a,data:(t=l==null?void 0:l.data)!==null&&t!==void 0?t:{},create_user:(r=l==null?void 0:l.shouldCreateUser)!==null&&r!==void 0?r:!0,gotrue_meta_security:{captcha_token:l==null?void 0:l.captchaToken},code_challenge:c,code_challenge_method:d},redirectTo:l==null?void 0:l.emailRedirectTo});return{data:{user:null,session:null},error:u}}if("phone"in e){const{phone:a,options:l}=e,{data:c,error:d}=await v(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:a,data:(i=l==null?void 0:l.data)!==null&&i!==void 0?i:{},create_user:(n=l==null?void 0:l.shouldCreateUser)!==null&&n!==void 0?n:!0,gotrue_meta_security:{captcha_token:l==null?void 0:l.captchaToken},channel:(o=l==null?void 0:l.channel)!==null&&o!==void 0?o:"sms"}});return{data:{user:null,session:null,messageId:c==null?void 0:c.message_id},error:d}}throw new ge("You must provide either an email or phone number.")}catch(a){if(p(a))return{data:{user:null,session:null},error:a};throw a}}async verifyOtp(e){var t,r;try{let i,n;"options"in e&&(i=(t=e.options)===null||t===void 0?void 0:t.redirectTo,n=(r=e.options)===null||r===void 0?void 0:r.captchaToken);const{data:o,error:a}=await v(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},e),{gotrue_meta_security:{captcha_token:n}}),redirectTo:i,xform:I});if(a)throw a;if(!o)throw new Error("An error occurred on token verification.");const l=o.session,c=o.user;return l!=null&&l.access_token&&(await this._saveSession(l),await this._notifyAllSubscribers(e.type=="recovery"?"PASSWORD_RECOVERY":"SIGNED_IN",l)),{data:{user:c,session:l},error:null}}catch(i){if(p(i))return{data:{user:null,session:null},error:i};throw i}}async signInWithSSO(e){var t,r,i;try{let n=null,o=null;return this.flowType==="pkce"&&([n,o]=await V(this.storage,this.storageKey)),await v(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in e?{provider_id:e.providerId}:null),"domain"in e?{domain:e.domain}:null),{redirect_to:(r=(t=e.options)===null||t===void 0?void 0:t.redirectTo)!==null&&r!==void 0?r:void 0}),!((i=e==null?void 0:e.options)===null||i===void 0)&&i.captchaToken?{gotrue_meta_security:{captcha_token:e.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:n,code_challenge_method:o}),headers:this.headers,xform:Ms})}catch(n){if(p(n))return{data:null,error:n};throw n}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async e=>{const{data:{session:t},error:r}=e;if(r)throw r;if(!t)throw new L;const{error:i}=await v(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:t.access_token});return{data:{user:null,session:null},error:i}})}catch(e){if(p(e))return{data:{user:null,session:null},error:e};throw e}}async resend(e){try{const t=`${this.url}/resend`;if("email"in e){const{email:r,type:i,options:n}=e,{error:o}=await v(this.fetch,"POST",t,{headers:this.headers,body:{email:r,type:i,gotrue_meta_security:{captcha_token:n==null?void 0:n.captchaToken}},redirectTo:n==null?void 0:n.emailRedirectTo});return{data:{user:null,session:null},error:o}}else if("phone"in e){const{phone:r,type:i,options:n}=e,{data:o,error:a}=await v(this.fetch,"POST",t,{headers:this.headers,body:{phone:r,type:i,gotrue_meta_security:{captcha_token:n==null?void 0:n.captchaToken}}});return{data:{user:null,session:null,messageId:o==null?void 0:o.message_id},error:a}}throw new ge("You must provide either an email or phone number and a type")}catch(t){if(p(t))return{data:{user:null,session:null},error:t};throw t}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async t=>t))}async _acquireLock(e,t){this._debug("#_acquireLock","begin",e);try{if(this.lockAcquired){const r=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),i=(async()=>(await r,await t()))();return this.pendingInLock.push((async()=>{try{await i}catch{}})()),i}return await this.lock(`lock:${this.storageKey}`,e,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const r=t();for(this.pendingInLock.push((async()=>{try{await r}catch{}})()),await r;this.pendingInLock.length;){const i=[...this.pendingInLock];await Promise.all(i),this.pendingInLock.splice(0,i.length)}return await r}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(e){this._debug("#_useSession","begin");try{const t=await this.__loadSession();return await e(t)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",new Error().stack);try{let e=null;const t=await me(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",t),t!==null&&(this._isValidSession(t)?e=t:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!e)return{data:{session:null},error:null};const r=e.expires_at?e.expires_at*1e3-Date.now()<Se:!1;if(this._debug("#__loadSession()",`session has${r?"":" not"} expired`,"expires_at",e.expires_at),!r){if(this.storage.isServer){let o=this.suppressGetSessionWarning;e=new Proxy(e,{get:(l,c,d)=>(!o&&c==="user"&&(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),o=!0,this.suppressGetSessionWarning=!0),Reflect.get(l,c,d))})}return{data:{session:e},error:null}}const{session:i,error:n}=await this._callRefreshToken(e.refresh_token);return n?{data:{session:null},error:n}:{data:{session:i},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(e){return e?await this._getUser(e):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(e){try{return e?await v(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:e,xform:D}):await this._useSession(async t=>{var r,i,n;const{data:o,error:a}=t;if(a)throw a;return!(!((r=o.session)===null||r===void 0)&&r.access_token)&&!this.hasCustomAuthorizationHeader?{data:{user:null},error:new L}:await v(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:(n=(i=o.session)===null||i===void 0?void 0:i.access_token)!==null&&n!==void 0?n:void 0,xform:D})})}catch(t){if(p(t))return hs(t)&&(await this._removeSession(),await ve(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:t};throw t}}async updateUser(e,t={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(e,t))}async _updateUser(e,t={}){try{return await this._useSession(async r=>{const{data:i,error:n}=r;if(n)throw n;if(!i.session)throw new L;const o=i.session;let a=null,l=null;this.flowType==="pkce"&&e.email!=null&&([a,l]=await V(this.storage,this.storageKey));const{data:c,error:d}=await v(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:t==null?void 0:t.emailRedirectTo,body:Object.assign(Object.assign({},e),{code_challenge:a,code_challenge_method:l}),jwt:o.access_token,xform:D});if(d)throw d;return o.user=c.user,await this._saveSession(o),await this._notifyAllSubscribers("USER_UPDATED",o),{data:{user:o.user},error:null}})}catch(r){if(p(r))return{data:{user:null},error:r};throw r}}async setSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(e))}async _setSession(e){try{if(!e.access_token||!e.refresh_token)throw new L;const t=Date.now()/1e3;let r=t,i=!0,n=null;const{payload:o}=Pe(e.access_token);if(o.exp&&(r=o.exp,i=r<=t),i){const{session:a,error:l}=await this._callRefreshToken(e.refresh_token);if(l)return{data:{user:null,session:null},error:l};if(!a)return{data:{user:null,session:null},error:null};n=a}else{const{data:a,error:l}=await this._getUser(e.access_token);if(l)throw l;n={access_token:e.access_token,refresh_token:e.refresh_token,user:a.user,token_type:"bearer",expires_in:r-t,expires_at:r},await this._saveSession(n),await this._notifyAllSubscribers("SIGNED_IN",n)}return{data:{user:n.user,session:n},error:null}}catch(t){if(p(t))return{data:{session:null,user:null},error:t};throw t}}async refreshSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(e))}async _refreshSession(e){try{return await this._useSession(async t=>{var r;if(!e){const{data:o,error:a}=t;if(a)throw a;e=(r=o.session)!==null&&r!==void 0?r:void 0}if(!(e!=null&&e.refresh_token))throw new L;const{session:i,error:n}=await this._callRefreshToken(e.refresh_token);return n?{data:{user:null,session:null},error:n}:i?{data:{user:i.user,session:i},error:null}:{data:{user:null,session:null},error:null}})}catch(t){if(p(t))return{data:{user:null,session:null},error:t};throw t}}async _getSessionFromURL(e,t){try{if(!A())throw new pe("No browser detected.");if(e.error||e.error_description||e.error_code)throw new pe(e.error_description||"Error in URL with unspecified error_description",{error:e.error||"unspecified_error",code:e.error_code||"unspecified_code"});switch(t){case"implicit":if(this.flowType==="pkce")throw new at("Not a valid PKCE flow url.");break;case"pkce":if(this.flowType==="implicit")throw new pe("Not a valid implicit grant flow url.");break;default:}if(t==="pkce"){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!e.code)throw new at("No code detected.");const{data:O,error:x}=await this._exchangeCodeForSession(e.code);if(x)throw x;const E=new URL(window.location.href);return E.searchParams.delete("code"),window.history.replaceState(window.history.state,"",E.toString()),{data:{session:O.session,redirectType:null},error:null}}const{provider_token:r,provider_refresh_token:i,access_token:n,refresh_token:o,expires_in:a,expires_at:l,token_type:c}=e;if(!n||!a||!o||!c)throw new pe("No session defined in URL");const d=Math.round(Date.now()/1e3),u=parseInt(a);let h=d+u;l&&(h=parseInt(l));const f=h-d;f*1e3<=Q&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${f}s, should have been closer to ${u}s`);const g=h-u;d-g>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",g,h,d):d-g<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",g,h,d);const{data:y,error:m}=await this._getUser(n);if(m)throw m;const T={provider_token:r,provider_refresh_token:i,access_token:n,expires_in:u,expires_at:h,refresh_token:o,token_type:c,user:y.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:T,redirectType:e.type},error:null}}catch(r){if(p(r))return{data:{session:null,redirectType:null},error:r};throw r}}_isImplicitGrantCallback(e){return!!(e.access_token||e.error_description)}async _isPKCECallback(e){const t=await me(this.storage,`${this.storageKey}-code-verifier`);return!!(e.code&&t)}async signOut(e={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(e))}async _signOut({scope:e}={scope:"global"}){return await this._useSession(async t=>{var r;const{data:i,error:n}=t;if(n)return{error:n};const o=(r=i.session)===null||r===void 0?void 0:r.access_token;if(o){const{error:a}=await this.admin.signOut(o,e);if(a&&!(us(a)&&(a.status===404||a.status===401||a.status===403)))return{error:a}}return e!=="others"&&(await this._removeSession(),await ve(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(e){const t=_s(),r={id:t,callback:e,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",t),this.stateChangeEmitters.delete(t)}};return this._debug("#onAuthStateChange()","registered callback with id",t),this.stateChangeEmitters.set(t,r),(async()=>(await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(t)})))(),{data:{subscription:r}}}async _emitInitialSession(e){return await this._useSession(async t=>{var r,i;try{const{data:{session:n},error:o}=t;if(o)throw o;await((r=this.stateChangeEmitters.get(e))===null||r===void 0?void 0:r.callback("INITIAL_SESSION",n)),this._debug("INITIAL_SESSION","callback id",e,"session",n)}catch(n){await((i=this.stateChangeEmitters.get(e))===null||i===void 0?void 0:i.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",e,"error",n),console.error(n)}})}async resetPasswordForEmail(e,t={}){let r=null,i=null;this.flowType==="pkce"&&([r,i]=await V(this.storage,this.storageKey,!0));try{return await v(this.fetch,"POST",`${this.url}/recover`,{body:{email:e,code_challenge:r,code_challenge_method:i,gotrue_meta_security:{captcha_token:t.captchaToken}},headers:this.headers,redirectTo:t.redirectTo})}catch(n){if(p(n))return{data:null,error:n};throw n}}async getUserIdentities(){var e;try{const{data:t,error:r}=await this.getUser();if(r)throw r;return{data:{identities:(e=t.user.identities)!==null&&e!==void 0?e:[]},error:null}}catch(t){if(p(t))return{data:null,error:t};throw t}}async linkIdentity(e){var t;try{const{data:r,error:i}=await this._useSession(async n=>{var o,a,l,c,d;const{data:u,error:h}=n;if(h)throw h;const f=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,e.provider,{redirectTo:(o=e.options)===null||o===void 0?void 0:o.redirectTo,scopes:(a=e.options)===null||a===void 0?void 0:a.scopes,queryParams:(l=e.options)===null||l===void 0?void 0:l.queryParams,skipBrowserRedirect:!0});return await v(this.fetch,"GET",f,{headers:this.headers,jwt:(d=(c=u.session)===null||c===void 0?void 0:c.access_token)!==null&&d!==void 0?d:void 0})});if(i)throw i;return A()&&!(!((t=e.options)===null||t===void 0)&&t.skipBrowserRedirect)&&window.location.assign(r==null?void 0:r.url),{data:{provider:e.provider,url:r==null?void 0:r.url},error:null}}catch(r){if(p(r))return{data:{provider:e.provider,url:null},error:r};throw r}}async unlinkIdentity(e){try{return await this._useSession(async t=>{var r,i;const{data:n,error:o}=t;if(o)throw o;return await v(this.fetch,"DELETE",`${this.url}/user/identities/${e.identity_id}`,{headers:this.headers,jwt:(i=(r=n.session)===null||r===void 0?void 0:r.access_token)!==null&&i!==void 0?i:void 0})})}catch(t){if(p(t))return{data:null,error:t};throw t}}async _refreshAccessToken(e){const t=`#_refreshAccessToken(${e.substring(0,5)}...)`;this._debug(t,"begin");try{const r=Date.now();return await Ss(async i=>(i>0&&await Es(200*Math.pow(2,i-1)),this._debug(t,"refreshing attempt",i),await v(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:e},headers:this.headers,xform:I})),(i,n)=>{const o=200*Math.pow(2,i);return n&&je(n)&&Date.now()+o-r<Q})}catch(r){if(this._debug(t,"error",r),p(r))return{data:{session:null,user:null},error:r};throw r}finally{this._debug(t,"end")}}_isValidSession(e){return typeof e=="object"&&e!==null&&"access_token"in e&&"refresh_token"in e&&"expires_at"in e}async _handleProviderSignIn(e,t){const r=await this._getUrlForProvider(`${this.url}/authorize`,e,{redirectTo:t.redirectTo,scopes:t.scopes,queryParams:t.queryParams});return this._debug("#_handleProviderSignIn()","provider",e,"options",t,"url",r),A()&&!t.skipBrowserRedirect&&window.location.assign(r),{data:{provider:e,url:r},error:null}}async _recoverAndRefresh(){var e;const t="#_recoverAndRefresh()";this._debug(t,"begin");try{const r=await me(this.storage,this.storageKey);if(this._debug(t,"session from storage",r),!this._isValidSession(r)){this._debug(t,"session is not valid"),r!==null&&await this._removeSession();return}const i=((e=r.expires_at)!==null&&e!==void 0?e:1/0)*1e3-Date.now()<Se;if(this._debug(t,`session has${i?"":" not"} expired with margin of ${Se}s`),i){if(this.autoRefreshToken&&r.refresh_token){const{error:n}=await this._callRefreshToken(r.refresh_token);n&&(console.error(n),je(n)||(this._debug(t,"refresh failed with a non-retryable error, removing the session",n),await this._removeSession()))}}else await this._notifyAllSubscribers("SIGNED_IN",r)}catch(r){this._debug(t,"error",r),console.error(r);return}finally{this._debug(t,"end")}}async _callRefreshToken(e){var t,r;if(!e)throw new L;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const i=`#_callRefreshToken(${e.substring(0,5)}...)`;this._debug(i,"begin");try{this.refreshingDeferred=new we;const{data:n,error:o}=await this._refreshAccessToken(e);if(o)throw o;if(!n.session)throw new L;await this._saveSession(n.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",n.session);const a={session:n.session,error:null};return this.refreshingDeferred.resolve(a),a}catch(n){if(this._debug(i,"error",n),p(n)){const o={session:null,error:n};return je(n)||await this._removeSession(),(t=this.refreshingDeferred)===null||t===void 0||t.resolve(o),o}throw(r=this.refreshingDeferred)===null||r===void 0||r.reject(n),n}finally{this.refreshingDeferred=null,this._debug(i,"end")}}async _notifyAllSubscribers(e,t,r=!0){const i=`#_notifyAllSubscribers(${e})`;this._debug(i,"begin",t,`broadcast = ${r}`);try{this.broadcastChannel&&r&&this.broadcastChannel.postMessage({event:e,session:t});const n=[],o=Array.from(this.stateChangeEmitters.values()).map(async a=>{try{await a.callback(e,t)}catch(l){n.push(l)}});if(await Promise.all(o),n.length>0){for(let a=0;a<n.length;a+=1)console.error(n[a]);throw n[0]}}finally{this._debug(i,"end")}}async _saveSession(e){this._debug("#_saveSession()",e),this.suppressGetSessionWarning=!0,await Bt(this.storage,this.storageKey,e)}async _removeSession(){this._debug("#_removeSession()"),await ve(this.storage,this.storageKey),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const e=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{e&&A()&&(window!=null&&window.removeEventListener)&&window.removeEventListener("visibilitychange",e)}catch(t){console.error("removing visibilitychange callback failed",t)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const e=setInterval(()=>this._autoRefreshTokenTick(),Q);this.autoRefreshTicker=e,e&&typeof e=="object"&&typeof e.unref=="function"?e.unref():typeof Deno<"u"&&typeof Deno.unrefTimer=="function"&&Deno.unrefTimer(e),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const e=this.autoRefreshTicker;this.autoRefreshTicker=null,e&&clearInterval(e)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const e=Date.now();try{return await this._useSession(async t=>{const{data:{session:r}}=t;if(!r||!r.refresh_token||!r.expires_at){this._debug("#_autoRefreshTokenTick()","no session");return}const i=Math.floor((r.expires_at*1e3-e)/Q);this._debug("#_autoRefreshTokenTick()",`access token expires in ${i} ticks, a tick lasts ${Q}ms, refresh threshold is ${Ie} ticks`),i<=Ie&&await this._callRefreshToken(r.refresh_token)})}catch(t){console.error("Auto refresh tick failed with error. This is likely a transient error.",t)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(e){if(e.isAcquireTimeout||e instanceof Nt)this._debug("auto refresh token tick lock not available");else throw e}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!A()||!(window!=null&&window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),window==null||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(e){console.error("_handleVisibilityChange",e)}}async _onVisibilityChanged(e){const t=`#_onVisibilityChanged(${e})`;this._debug(t,"visibilityState",document.visibilityState),document.visibilityState==="visible"?(this.autoRefreshToken&&this._startAutoRefresh(),e||(await this.initializePromise,await this._acquireLock(-1,async()=>{if(document.visibilityState!=="visible"){this._debug(t,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");return}await this._recoverAndRefresh()}))):document.visibilityState==="hidden"&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(e,t,r){const i=[`provider=${encodeURIComponent(t)}`];if(r!=null&&r.redirectTo&&i.push(`redirect_to=${encodeURIComponent(r.redirectTo)}`),r!=null&&r.scopes&&i.push(`scopes=${encodeURIComponent(r.scopes)}`),this.flowType==="pkce"){const[n,o]=await V(this.storage,this.storageKey),a=new URLSearchParams({code_challenge:`${encodeURIComponent(n)}`,code_challenge_method:`${encodeURIComponent(o)}`});i.push(a.toString())}if(r!=null&&r.queryParams){const n=new URLSearchParams(r.queryParams);i.push(n.toString())}return r!=null&&r.skipBrowserRedirect&&i.push(`skip_http_redirect=${r.skipBrowserRedirect}`),`${e}?${i.join("&")}`}async _unenroll(e){try{return await this._useSession(async t=>{var r;const{data:i,error:n}=t;return n?{data:null,error:n}:await v(this.fetch,"DELETE",`${this.url}/factors/${e.factorId}`,{headers:this.headers,jwt:(r=i==null?void 0:i.session)===null||r===void 0?void 0:r.access_token})})}catch(t){if(p(t))return{data:null,error:t};throw t}}async _enroll(e){try{return await this._useSession(async t=>{var r,i;const{data:n,error:o}=t;if(o)return{data:null,error:o};const a=Object.assign({friendly_name:e.friendlyName,factor_type:e.factorType},e.factorType==="phone"?{phone:e.phone}:{issuer:e.issuer}),{data:l,error:c}=await v(this.fetch,"POST",`${this.url}/factors`,{body:a,headers:this.headers,jwt:(r=n==null?void 0:n.session)===null||r===void 0?void 0:r.access_token});return c?{data:null,error:c}:(e.factorType==="totp"&&(!((i=l==null?void 0:l.totp)===null||i===void 0)&&i.qr_code)&&(l.totp.qr_code=`data:image/svg+xml;utf-8,${l.totp.qr_code}`),{data:l,error:null})})}catch(t){if(p(t))return{data:null,error:t};throw t}}async _verify(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var r;const{data:i,error:n}=t;if(n)return{data:null,error:n};const{data:o,error:a}=await v(this.fetch,"POST",`${this.url}/factors/${e.factorId}/verify`,{body:{code:e.code,challenge_id:e.challengeId},headers:this.headers,jwt:(r=i==null?void 0:i.session)===null||r===void 0?void 0:r.access_token});return a?{data:null,error:a}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+o.expires_in},o)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",o),{data:o,error:a})})}catch(t){if(p(t))return{data:null,error:t};throw t}})}async _challenge(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var r;const{data:i,error:n}=t;return n?{data:null,error:n}:await v(this.fetch,"POST",`${this.url}/factors/${e.factorId}/challenge`,{body:{channel:e.channel},headers:this.headers,jwt:(r=i==null?void 0:i.session)===null||r===void 0?void 0:r.access_token})})}catch(t){if(p(t))return{data:null,error:t};throw t}})}async _challengeAndVerify(e){const{data:t,error:r}=await this._challenge({factorId:e.factorId});return r?{data:null,error:r}:await this._verify({factorId:e.factorId,challengeId:t.id,code:e.code})}async _listFactors(){const{data:{user:e},error:t}=await this.getUser();if(t)return{data:null,error:t};const r=(e==null?void 0:e.factors)||[],i=r.filter(o=>o.factor_type==="totp"&&o.status==="verified"),n=r.filter(o=>o.factor_type==="phone"&&o.status==="verified");return{data:{all:r,totp:i,phone:n},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async e=>{var t,r;const{data:{session:i},error:n}=e;if(n)return{data:null,error:n};if(!i)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:o}=Pe(i.access_token);let a=null;o.aal&&(a=o.aal);let l=a;((r=(t=i.user.factors)===null||t===void 0?void 0:t.filter(u=>u.status==="verified"))!==null&&r!==void 0?r:[]).length>0&&(l="aal2");const d=o.amr||[];return{data:{currentLevel:a,nextLevel:l,currentAuthenticationMethods:d},error:null}}))}async fetchJwk(e,t={keys:[]}){let r=t.keys.find(o=>o.kid===e);if(r||(r=this.jwks.keys.find(o=>o.kid===e),r&&this.jwks_cached_at+cs>Date.now()))return r;const{data:i,error:n}=await v(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(n)throw n;if(!i.keys||i.keys.length===0)throw new ae("JWKS is empty");if(this.jwks=i,this.jwks_cached_at=Date.now(),r=i.keys.find(o=>o.kid===e),!r)throw new ae("No matching signing key found in JWKS");return r}async getClaims(e,t={keys:[]}){try{let r=e;if(!r){const{data:f,error:g}=await this.getSession();if(g||!f.session)return{data:null,error:g};r=f.session.access_token}const{header:i,payload:n,signature:o,raw:{header:a,payload:l}}=Pe(r);if(Cs(n.exp),!i.kid||i.alg==="HS256"||!("crypto"in globalThis&&"subtle"in globalThis.crypto)){const{error:f}=await this.getUser(r);if(f)throw f;return{data:{claims:n,header:i,signature:o},error:null}}const c=Ls(i.alg),d=await this.fetchJwk(i.kid,t),u=await crypto.subtle.importKey("jwk",d,c,!0,["verify"]);if(!await crypto.subtle.verify(c,u,o,bs(`${a}.${l}`)))throw new ae("Invalid JWT signature");return{data:{claims:n,header:i,signature:o},error:null}}catch(r){if(p(r))return{data:null,error:r};throw r}}}ce.nextInstanceID=0;const Ws=ce;class Qs extends Ws{constructor(e){super(e)}}var Ys=function(s,e,t,r){function i(n){return n instanceof t?n:new t(function(o){o(n)})}return new(t||(t=Promise))(function(n,o){function a(d){try{c(r.next(d))}catch(u){o(u)}}function l(d){try{c(r.throw(d))}catch(u){o(u)}}function c(d){d.done?n(d.value):i(d.value).then(a,l)}c((r=r.apply(s,e||[])).next())})};class Xs{constructor(e,t,r){var i,n,o;if(this.supabaseUrl=e,this.supabaseKey=t,!e)throw new Error("supabaseUrl is required.");if(!t)throw new Error("supabaseKey is required.");const a=ss(e);this.realtimeUrl=`${a}/realtime/v1`.replace(/^http/i,"ws"),this.authUrl=`${a}/auth/v1`,this.storageUrl=`${a}/storage/v1`,this.functionsUrl=`${a}/functions/v1`;const l=`sb-${new URL(this.authUrl).hostname.split(".")[0]}-auth-token`,c={db:Wr,realtime:Yr,auth:Object.assign(Object.assign({},Qr),{storageKey:l}),global:Vr},d=is(r??{},c);this.storageKey=(i=d.auth.storageKey)!==null&&i!==void 0?i:"",this.headers=(n=d.global.headers)!==null&&n!==void 0?n:{},d.accessToken?(this.accessToken=d.accessToken,this.auth=new Proxy({},{get:(u,h)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(h)} is not possible`)}})):this.auth=this._initSupabaseAuthClient((o=d.auth)!==null&&o!==void 0?o:{},this.headers,d.global.fetch),this.fetch=ts(t,this._getAccessToken.bind(this),d.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},d.realtime)),this.rest=new mr(`${a}/rest/v1`,{headers:this.headers,schema:d.db.schema,fetch:this.fetch}),d.accessToken||this._listenForAuthEvents()}get functions(){return new rr(this.functionsUrl,{headers:this.headers,customFetch:this.fetch})}get storage(){return new Jr(this.storageUrl,this.headers,this.fetch)}from(e){return this.rest.from(e)}schema(e){return this.rest.schema(e)}rpc(e,t={},r={}){return this.rest.rpc(e,t,r)}channel(e,t={config:{}}){return this.realtime.channel(e,t)}getChannels(){return this.realtime.getChannels()}removeChannel(e){return this.realtime.removeChannel(e)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var e,t;return Ys(this,void 0,void 0,function*(){if(this.accessToken)return yield this.accessToken();const{data:r}=yield this.auth.getSession();return(t=(e=r.session)===null||e===void 0?void 0:e.access_token)!==null&&t!==void 0?t:null})}_initSupabaseAuthClient({autoRefreshToken:e,persistSession:t,detectSessionInUrl:r,storage:i,storageKey:n,flowType:o,lock:a,debug:l},c,d){const u={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new Qs({url:this.authUrl,headers:Object.assign(Object.assign({},u),c),storageKey:n,autoRefreshToken:e,persistSession:t,detectSessionInUrl:r,storage:i,flowType:o,lock:a,debug:l,fetch:d,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(e){return new Ar(this.realtimeUrl,Object.assign(Object.assign({},e),{params:Object.assign({apikey:this.supabaseKey},e==null?void 0:e.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((t,r)=>{this._handleTokenChanged(t,"CLIENT",r==null?void 0:r.access_token)})}_handleTokenChanged(e,t,r){(e==="TOKEN_REFRESHED"||e==="SIGNED_IN")&&this.changedAccessToken!==r?this.changedAccessToken=r:e==="SIGNED_OUT"&&(this.realtime.setAuth(),t=="STORAGE"&&this.auth.signOut(),this.changedAccessToken=void 0)}}const Zs=(s,e,t)=>new Xs(s,e,t),ei="https://hvrfmzyxtcdzikzuhcja.supabase.co",ti="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh2cmZtenl4dGNkemlrenVoY2phIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NTU4MzU3OCwiZXhwIjoyMDYxMTU5NTc4fQ.VavAi0nEPRzCcM3jdKtGDJ06sLBpYxyn5QLbIr3IAWs",te=Zs(ei,ti),mt={React:"bg-sky-100 text-sky-800 dark:bg-sky-900 dark:text-sky-200",Go:"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",Golang:"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",Kafka:"bg-rose-100 text-rose-800 dark:bg-rose-700 dark:text-rose-200",Redis:"bg-orange-100 text-orange-900 dark:bg-orange-900 dark:text-orange-200",RabbitMQ:"bg-pink-100 text-pink-900 dark:bg-pink-900 dark:text-pink-200",gRPC:"bg-lime-100 text-lime-800 dark:bg-lime-900 dark:text-lime-200",Express:"bg-zinc-100 text-zinc-800 dark:bg-zinc-900 dark:text-zinc-200",Django:"bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200",Flask:"bg-stone-100 text-stone-800 dark:bg-stone-900 dark:text-stone-200",MongoDB:"bg-green-100 text-green-900 dark:bg-green-900 dark:text-green-200","Node.js":"bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200",PostgreSQL:"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200",MySQL:"bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-200","React Native":"bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200",Flutter:"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200",JavaScript:"bg-yellow-100 text-yellow-900 dark:bg-yellow-900 dark:text-yellow-200",TypeScript:"bg-blue-200 text-blue-900 dark:bg-blue-950 dark:text-blue-200",Python:"bg-cyan-100 text-cyan-900 dark:bg-cyan-900 dark:text-cyan-200",Java:"bg-red-200 text-red-900 dark:bg-red-950 dark:text-red-200","C++":"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200",Docker:"bg-sky-200 text-sky-900 dark:bg-sky-950 dark:text-sky-200",Kubernetes:"bg-violet-100 text-violet-800 dark:bg-violet-900 dark:text-violet-200",AWS:"bg-orange-200 text-orange-900 dark:bg-orange-950 dark:text-orange-200",GCP:"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200",default:"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200"};function He(s){return mt[s]||mt.default}function ri(s){const e=new Error(s);throw e.statusCode=404,e.timestamp=new Date,e}async function _e(s,e="Loading..."){try{return console.log(e),await s()}catch(t){throw console.error("API Error:",t),ri("Failed to load data")}finally{ui()}}async function si(){return _e(async()=>{const{data:s,error:e}=await te.from("Projects").select("*").order("created_at",{ascending:!1});if(e)throw new Error("Failed to load projects");return s},"Loading projects...")}async function ii(){return _e(async()=>{const{data:s,error:e}=await te.from("Personal").select("*").order("created_at",{ascending:!1});if(e)throw new Error("Failed to load projects");return s},"Loading personal projects...")}async function ni(){return _e(async()=>{const{data:s,error:e}=await te.from("Publications").select("*").order("created_at",{ascending:!1});if(e)throw new Error("Failed to load publications");return s},"Loading publications...")}async function oi(){return _e(async()=>{const{data:s,error:e}=await te.from("References").select("*");if(e)throw new Error("Failed to load references");return s},"Loading references...")}async function ai(s){const e=await fetch(s);if(!e.ok)throw new Error(`Failed to fetch PDF: ${e.status}`);return await e.blob()}async function qt(){try{const{data:s,error:e}=await te.from("Resume").select("link").order("created_at",{ascending:!1}).limit(1).single();if(e)throw e;if(!s)throw new Error("No resume found");return typeof s.link=="string"?s.link:s.link.join("")}catch(s){throw console.error("Error fetching resume:",s),s}}const k={projects:[],personal_projects:[],publications:[],references:[],initialized:!1,resume:""};let li=!1,ye=null;async function Je(s=3){return ye||(ye=(async()=>{try{console.log("Starting cache initialization...");const[e,t,r,i,n]=await Promise.all([si(),ii(),ni(),oi(),qt()]);return k.projects=e||[],k.publications=r||[],k.references=i||[],k.personal_projects=t||[],typeof n=="string"?(k.resume=n,console.log("YES")):k.resume=n.join(""),console.log("projects--> ",k.projects),console.log("resume--> ",k.resume),console.log("publications--> ",r),console.log("references--> ",i),console.log("personal projects--> ",t),ci(),li=!0,k.initialized=!0,console.log("Cache initialized successfully"),!0}catch(e){if(console.error("Cache initialization error:",e),s>0)return console.log(`Retrying cache initialization (${s} left)`),await new Promise(t=>setTimeout(t,2e3)),Je(s-1);throw e}})(),ye)}async function he(s){return k.initialized?Ue(s):new Promise(e=>{const t=()=>{e(Ue(s)),document.removeEventListener("cache-ready",t)};document.addEventListener("cache-ready",t)})}function Ue(s){return k.initialized?[...k[s]]:(console.warn(`Cache accessed before initialization for key: ${s}`),[])}function ci(){[{name:"Projects",key:"projects"},{name:"Publications",key:"publications"},{name:"References",key:"references"},{name:"Personal",key:"personal"}].forEach(({name:e,key:t})=>{te.channel(`public_changes:${e}`).on("postgres_changes",{event:"*",schema:"public",table:e},r=>{di(t,r)}).subscribe(r=>{r==="SUBSCRIBED"&&console.log(`Realtime ${t} subscription established`)})})}function di(s,e){switch(e.eventType){case"INSERT":k[s].unshift(e.new);break;case"UPDATE":k[s]=k[s].map(t=>t.id===e.new.id?e.new:t);break;case"DELETE":k[s]=k[s].filter(t=>t.id!==e.old.id);break}document.dispatchEvent(new CustomEvent(`${s}-updated`))}const Ft=Je();function ui(){document.getElementById("loading-overlay").classList.add("hidden")}function de(s){const e=document.getElementById("error-modal");document.getElementById("error-message").textContent=s,e.classList.remove("hidden")}function hi(){document.getElementById("error-modal").classList.add("hidden")}function zt(){const s=document.createElement("div");return s.className="card dark:bg-slate-700 rounded-lg shadow-md overflow-hidden dark:border-slate-600",s.innerHTML=`
    <div class="animate-pulse bg-gray-200 dark:bg-slate-600 h-32 w-full"></div>
    <div class="p-4">
      <div class="animate-pulse bg-gray-200 dark:bg-slate-600 h-6 w-3/4 mb-3"></div>
      <div class="animate-pulse bg-gray-200 dark:bg-slate-600 h-4 w-full mb-2"></div>
      <div class="animate-pulse bg-gray-200 dark:bg-slate-600 h-4 w-5/6 mb-4"></div>
      <div class="flex flex-wrap gap-2">
        <div class="animate-pulse bg-gray-200 dark:bg-slate-600 h-6 w-16 rounded-full"></div>
        <div class="animate-pulse bg-gray-200 dark:bg-slate-600 h-6 w-16 rounded-full"></div>
      </div>
      <div class="animate-pulse bg-gray-200 dark:bg-slate-600 h-5 w-24 mt-4"></div>
    </div>
  `,s}function fi(){const s=document.createElement("div");return s.className="card dark:bg-slate-700 p-6 rounded-lg shadow-md mb-6 dark:border-slate-600",s.innerHTML=`
    <div class="animate-pulse">
      <!-- Title + Type Badge -->
      <div class="flex justify-between items-start mb-4">
        <div class="bg-gray-200 dark:bg-slate-600 h-7 w-3/4 rounded"></div>
        <div class="bg-gray-200 dark:bg-slate-600 h-5 w-12 rounded-full"></div>
      </div>
      
      <!-- Description -->
      <div class="space-y-2 mb-4">
        <div class="bg-gray-200 dark:bg-slate-600 h-4 w-full rounded"></div>
        <div class="bg-gray-200 dark:bg-slate-600 h-4 w-5/6 rounded"></div>
        <div class="bg-gray-200 dark:bg-slate-600 h-4 w-2/3 rounded"></div>
      </div>
      
      <!-- Feature Chips -->
      <div class="flex flex-wrap gap-2 mb-4">
        <div class="bg-gray-200 dark:bg-slate-600 h-6 w-20 rounded-full"></div>
        <div class="bg-gray-200 dark:bg-slate-600 h-6 w-16 rounded-full"></div>
        <div class="bg-gray-200 dark:bg-slate-600 h-6 w-24 rounded-full"></div>
      </div>
      
      <!-- Status/Date + Links Row -->
      <div class="flex justify-between items-center mt-4">
        <div class="flex space-x-3">
          <div class="bg-gray-200 dark:bg-slate-600 h-5 w-16 rounded"></div>
          <div class="bg-gray-200 dark:bg-slate-600 h-5 w-20 rounded"></div>
        </div>
        <div class="flex space-x-3">
          <div class="bg-gray-200 dark:bg-slate-600 h-5 w-12 rounded"></div>
          <div class="bg-gray-200 dark:bg-slate-600 h-5 w-14 rounded"></div>
          <div class="bg-gray-200 dark:bg-slate-600 h-5 w-16 rounded"></div>
        </div>
      </div>
    </div>
  `,s}function gi(){window.addEventListener("error",s=>{s.preventDefault(),de("An unexpected error occurred"),console.error("Global error:",s.error)}),window.addEventListener("unhandledrejection",s=>{s.preventDefault(),de("An async operation failed"),console.error("Unhandled rejection:",s.reason)})}async function Ht(s){s.preventDefault();const e=s.currentTarget,t=e.innerHTML;try{e.innerHTML='<i class="fas fa-spinner fa-spin mr-2"></i> Downloading...',e.disabled=!0;let r=await he("resume");r||(r=await fetchResume()),Array.isArray(r)&&(r=r.join(""));const i=await ai(r);if(console.log("Blob data:",i),!i)throw new Error("No data received");const n=URL.createObjectURL(i),o=document.createElement("a");o.href=n,o.download="Alefew_Yimer_Resume.pdf",document.body.appendChild(o),o.click(),setTimeout(()=>{document.body.removeChild(o),URL.revokeObjectURL(n),e.innerHTML=t,e.disabled=!1},100)}catch(r){e.innerHTML=t,e.disabled=!1,console.error("Download failed:",r),de("Failed to download Resume")}finally{e.innerHTML=t,e.disabled=!1}}function pi(){const s=document.getElementById("download-cv-btn");s&&s.addEventListener("click",e=>{e.stopPropagation(),Ht(e)})}document.querySelectorAll('[onclick="togglePdfModal()"]').forEach(s=>{s.onclick=e=>togglePdfModal(e)});let vt;function Me(s,e,t="info",r=5e3){const i=document.getElementById("message-modal"),n=document.getElementById("message-icon"),o=document.getElementById("message-title");clearTimeout(vt);const a={success:{icon:"fa-check-circle",color:"text-green-500"},error:{icon:"fa-times-circle",color:"text-red-500"},warning:{icon:"fa-exclamation-triangle",color:"text-yellow-500"},info:{icon:"fa-info-circle",color:"text-blue-500"}};n.className=`fas ${a[t].icon} text-xl mt-1 ${a[t].color}`,o.textContent=s,document.getElementById("message-content").textContent=e,i.classList.remove("hidden"),setTimeout(()=>{i.classList.remove("opacity-0"),i.querySelector("div").classList.remove("scale-95")},10),r>0&&(vt=setTimeout(Jt,r))}function Jt(){const s=document.getElementById("message-modal");s.classList.add("opacity-0"),s.querySelector("div").classList.add("scale-95"),setTimeout(()=>{s.classList.add("hidden")},300)}async function mi(s){s.preventDefault();const e=s.target,t=e.querySelector("button"),r=t.textContent;try{t.disabled=!0,t.textContent="Sending...";const i=new FormData(e),n=await fetch("https://hvrfmzyxtcdzikzuhcja.supabase.co/functions/v1/send-contact-email",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh2cmZtenl4dGNkemlrenVoY2phIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU1ODM1NzgsImV4cCI6MjA2MTE1OTU3OH0.5YU0RqIxzPM37uOSCakOF1qiSed6Q4P1jLSSxq_1ibI"},body:JSON.stringify(Object.fromEntries(i))}),o=await n.json();if(!n.ok)throw new Error(o.error);Me("Success!","Message sent successfully!","success",5e3),e.reset()}catch(i){Me("Error",`Failed to send message:  ${i.message}`,"error",0)}finally{t.disabled=!1,t.textContent=r}}function vi(){const s=document.getElementById("Contact");s.innerHTML=`
  <h2 class="text-2xl font-bold mb-6">Contact Me</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <!-- Contact Form -->
          <div class="dark:bg-slate-700 p-6 rounded-lg">
              <h3 class="text-xl font-semibold mb-4">Send a Message</h3>
              <form id="contact-form" class="space-y-4">
                  <input type="text" name="name" placeholder="Your Name" required
                      class="w-full p-2 rounded bg-slate-800 border border-slate-700">
                  <input type="email" name="email" placeholder="Your Email" required
                      class="w-full p-2 rounded bg-slate-800 border border-slate-700">
                  <textarea name="message" rows="4" required
                      class="w-full p-2 rounded bg-slate-800 border border-slate-700"></textarea>
                  <button type="submit"
                      class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg">
                      Send Message
                  </button>
              </form>
          </div>

          <!-- Contact Information -->
          <div class="dark:bg-slate-700 p-6 rounded-lg">
              <h3 class="text-xl font-semibold mb-4">Contact Information</h3>
              <div class="space-y-4">
                  <div class="flex items-start">
                      <i class="fas fa-envelope mt-1 mr-3 text-blue-400"></i>
                      <div>
                          <p class="font-medium">Email</p>
                          <p>alefew.yimer@example.com</p>
                      </div>
                  </div>
                  <div class="flex items-start">
                      <i class="fas fa-phone mt-1 mr-3 text-blue-400"></i>
                      <div>
                          <p class="font-medium">Phone</p>
                          <p>+251 (906) 83-7962</p>
                      </div>
                  </div>
                  <div class="flex items-start">
                      <i class="fas fa-map-marker-alt mt-1 mr-3 text-blue-400"></i>
                      <div>
                          <p class="font-medium">Location</p>
                          <p>Addis Ababa, Ethiopia</p>
                      </div>
                  </div>
              </div>

              <div class="mt-6">
                  <h4 class="font-medium mb-2">Connect with me</h4>
                  <div class="flex space-x-4">
                      <a href="https://linkedin.com/in/alefew" class="text-blue-400 hover:text-blue-300 text-xl">
                          <i class="fab fa-linkedin"></i>
                      </a>
                      <a href="https://github.com/aleale2121" class="text-blue-400 hover:text-blue-300 text-xl">
                          <i class="fab fa-github"></i>
                      </a>
                      <a href="https://www.instagram.com/alefew_yimer" class="text-blue-400 hover:text-blue-300 text-xl">
                          <i class="fab fa-instagram"></i>
                      </a>
                  </div>
              </div>
          </div>
      </div>
  `}function yi(){vi(),bi()}function bi(s){document.getElementById("contact-form").addEventListener("submit",mi)}function wi(s){try{const e=Ue("projects").find(u=>u.id==s);if(!e)throw new Error("Project not found");document.getElementById("project-title").textContent=e.title||"Untitled Project",document.getElementById("project-description").textContent=e.description||"No description available";const t=document.getElementById("project-links");if(t.classList.add("hidden"),e.liveLink||e.codeLink){t.classList.remove("hidden");const u=document.getElementById("project-live-link"),h=document.getElementById("project-code-link");e.liveLink?(u.href=e.liveLink,u.classList.remove("hidden")):u.classList.add("hidden"),e.codeLink?(h.href=e.codeLink,h.classList.remove("hidden")):h.classList.add("hidden")}const r=document.getElementById("project-technologies");r.innerHTML=(e.technologies||[]).map(u=>`
        <span class="px-3 py-1 rounded-full text-sm ${He(u)}">
          ${u}
        </span>
      `).join("");const i=document.getElementById("project-images"),o=e.type==="mobile"?e.mobile_images:e.web_images;i.innerHTML=o.map((u,h)=>`
        <img src="${u}" 
             alt="Project screenshot ${h+1}"
             class="h-full object-contain"
             onerror="this.src='default-project.jpg'">
      `).join("");const a=document.getElementById("project-features");a.innerHTML=(e.features||[]).map(u=>`<li>${u}</li>`).join("");const l=document.getElementById("project-contributions");l.innerHTML=(e.contributions||[]).map(u=>`<li>${u}</li>`).join("");const c=document.getElementById("project-challenges");c.innerHTML=(e.challenges_solutions||[]).map(u=>`<li>${u}</li>`).join("");const d=document.getElementById("project-impact");d.innerHTML=(e.impact||[]).map(u=>`<li>${u}</li>`).join(""),document.getElementById("project-modal").classList.remove("hidden"),document.body.style.overflow="hidden"}catch(e){de("Failed to load project details"),console.error("Project modal error:",e),ke()}}function ke(){document.getElementById("project-modal").classList.add("hidden"),document.body.style.overflow=""}document.querySelector(".modal-backdrop").addEventListener("click",ke);document.addEventListener("keydown",function(s){s.key==="Escape"&&ke()});document.addEventListener("click",function(s){s.target.tagName==="IMG"&&s.target.closest("#project-images")&&(s.target.classList.toggle("zoomed"),s.target.classList.toggle("cursor-zoom-out"),s.target.classList.toggle("cursor-zoom-in"))});async function _i(){try{console.log("Initializing projects tab..."),ki(),xi();const s=new Promise(e=>{if(document.readyState==="complete"||document.readyState==="interactive")return console.log("DOM already ready"),e();const t=()=>{console.log("DOMContentLoaded received"),document.removeEventListener("DOMContentLoaded",t),e()};document.addEventListener("DOMContentLoaded",t)});await Promise.race([Promise.all([Ft,s]),new Promise((e,t)=>setTimeout(()=>t(new Error("Initialization timeout (check DOM or cache)")),5e3))]),console.log("Both cache and DOM ready"),document.addEventListener("projects-updated",yt),document.addEventListener("personal_projects-updated",bt),await yt(),await bt()}catch(s){console.error("Initialization failed:",s),Gt(new Error("Failed to load data")),Kt(new Error("Failed to load data"))}}async function yt(){try{console.log("Starting to render projects..."),Ei();const s=await he("projects");console.log("Received projects:",s);const e=document.getElementById("projects-container");if(!e)throw new Error("Projects container not found");if(!s||!s.length){console.log("No projects found"),e.innerHTML=`
        <div class="col-span-full text-center py-8">
          <p class="text-gray-500 dark:text-gray-400">No projects found</p>
        </div>
      `;return}console.log(`Rendering ${s.length} projects`),e.innerHTML=s.map(t=>{const r=t.type==="mobile";return`
      <div class="card dark:bg-slate-700 rounded-lg shadow-md overflow-hidden dark:border-slate-600">
        ${(()=>{var n,o;return r&&((n=t.mobile_images)==null?void 0:n.length)>=3?`
          <div class="flex gap-1 h-48 overflow-hidden">
            ${t.mobile_images.slice(0,Math.min(3,t.mobile_images.length)).map(a=>`
              <img src="${a}" 
                   alt="${t.title||"Mobile screenshot"}" 
                   class="flex-1 object-cover border dark:border-slate-600"
                   onerror="this.src='default-mobile.jpg'">
            `).join("")}
          </div>
        `:`
          <img src="${t.cover_image||((o=t.web_images)==null?void 0:o[0])||"default-project.jpg"}"
               alt="${t.title||"Project"}" 
               class="w-full h-48 object-cover"
               onerror="this.src='default-project.jpg'">
        `})()}
        <div class="p-4">
          <h3 class="font-bold text-xl mb-2">${t.title||"Untitled Project"}</h3>
          <p class="dark:text-gray-300 mb-4">
            ${t.description||"No description available"}
          </p>
          <div class="flex flex-wrap gap-2">
            ${(t.technologies||[]).map(n=>`
                <span class="px-2 py-1 rounded-full text-xs ${He(n)}">
                  ${n}
                </span>
              `).join("")}
          </div>
          <div class="mt-4 flex justify-between">
            ${t.liveLink?`
              <a href="${t.liveLink}" 
                 target="_blank" 
                 rel="noopener noreferrer"
                 class="inline-block dark:text-blue-400 hover:underline">
                Live Demo
              </a>
            `:""}
            ${t.codeLink?`
              <a href="${t.codeLink}" 
                 target="_blank" 
                 rel="noopener noreferrer"
                 class="inline-block dark:text-blue-400 hover:underline">
                View Code
              </a>
            `:""}
            <button onclick="window.showProjectModal('${t.id}')"
                    class="inline-block dark:text-blue-400 hover:underline">
              Details →
            </button>
          </div>
        </div>
      </div>
    `}).join(""),console.log("Projects rendered successfully")}catch(s){console.error("Error in renderProjects:",s),Gt(s)}}async function bt(){try{console.log("Starting to render personal projects..."),Si();const s=await he("personal_projects");console.log("Received personal projects:",s);const e=document.getElementById("personal-projects-container");if(!e)throw new Error("Personal projects container not found");if(!s||!s.length){console.log("No personal projects found"),e.innerHTML=`
        <div class="text-center py-8">
          <p class="text-gray-500 dark:text-gray-400">No personal projects found</p>
        </div>
      `;return}console.log(`Rendering ${s.length} personal projects`),e.innerHTML=s.map(t=>{var r;return`
        <div class="card dark:bg-slate-700 p-6 rounded-lg shadow-md mb-6 dark:border-slate-600">
  <div class="flex justify-between items-start mb-3">
    <h3 class="font-bold text-xl">${t.title}</h3>
    ${t.type?`<span class="text-xs px-2 py-1 bg-pink-100 dark:bg-pink-900 rounded-full">${t.type}</span>`:""}
  </div>

  <p class="dark:text-gray-300 mb-4">${t.description}</p>

  ${(r=t.features)!=null&&r.length?`
        <div class="flex flex-wrap gap-2 mb-4">
          ${t.features.map(i=>`
            <span class="px-2 py-1 rounded-full text-xs bg-blue-100/50 dark:bg-blue-900/50">
              <i class="fas fa-check-circle mr-1 text-blue-500 dark:text-blue-300"></i>
              ${i}
            </span>
          `).join("")}
        </div>
      `:""}
          <div class="flex flex-wrap gap-2 mb-4">
              ${(t.technologies||[]).map(i=>`
                  <span class="px-2 py-1 rounded-full text-xs ${He(i)}">
                    ${i}
                  </span>
                `).join("")}
            </div>

      <div class="flex justify-between items-center mt-4">
        <div class="flex items-center space-x-3 text-sm dark:text-gray-400">
          ${t.date?`
            <span class="flex items-center">
              <i class="far fa-calendar mr-1"></i>
              ${t.date}
            </span>
          `:""}
          
          ${t.status?`
            <span class="flex items-center">
              <i class="fas fa-circle mr-1 ${t.status==="completed"?"text-green-500":"text-yellow-500"}"></i>
              ${t.status}
            </span>
          `:""}
        </div>

        <div class="flex space-x-3">
          ${t.codeLink?`
            <a href="${t.codeLink}" 
              target="_blank"
              class="dark:text-blue-400 hover:underline flex items-center">
              <i class="fab fa-github mr-1"></i> Code
            </a>
          `:""}
          
          ${t.liveLink?`
            <a href="${t.liveLink}" 
              target="_blank"
              class="dark:text-blue-400 hover:underline flex items-center">
              <i class="fas fa-external-link-alt mr-1"></i> Demo
            </a>
          `:""}
        </div>
      </div>
    </div>
      `}).join(""),console.log("Personal projects rendered successfully")}catch(s){console.error("Error in renderPersonalProjects:",s),Kt(s)}}function ki(){const s=document.getElementById("projects-container");s.innerHTML="";for(let e=0;e<3;e++)s.appendChild(zt())}function xi(){const s=document.getElementById("personal-projects-container");s.innerHTML="";for(let e=0;e<3;e++)s.appendChild(fi())}function Gt(s){const e=document.getElementById("projects-container");e.innerHTML=`
    <div class="col-span-full text-center py-8">
      <p class="text-red-500 dark:text-red-400">${s.message}</p>
      <button onclick="window.location.reload()" 
        class="mt-4 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded">
        Reload Page
      </button>
    </div>
  `}function Kt(s){const e=document.getElementById("personal-projects-container");e.innerHTML=`
    <div class="text-center py-8">
      <p class="text-red-500 dark:text-red-400">${s.message}</p>
      <button onclick="window.location.reload()" 
              class="mt-4 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded">
        Reload Page
      </button>
    </div>
  `}function Ei(){const s=document.getElementById("projects-container");s.innerHTML=`
    <div class="col-span-full text-center py-8">
      <p class="text-gray-500 dark:text-gray-400">Loading projects...</p>
    </div>
  `}function Si(){const s=document.getElementById("personal-projects-container");s.innerHTML=`
    <div class="text-center py-8">
      <p class="text-gray-500 dark:text-gray-400">Loading personal projects...</p>
    </div>
  `}function Ti(){document.getElementById("Projects-Tab").click(),document.addEventListener("click",function(s){const e=document.getElementById("mobile-nav-links"),t=document.getElementById("mobile-menu-button");e.classList.contains("show")&&!e.contains(s.target)&&!t.contains(s.target)&&e.classList.remove("show")})}function ji(s,e,t){s&&s.preventDefault(),document.querySelectorAll(".tab-content").forEach(i=>{i.classList.add("hidden")}),document.querySelectorAll(".tab").forEach(i=>{i.classList.remove("active-tab")}),document.getElementById(e).classList.remove("hidden"),document.getElementById(t).classList.add("active-tab");const r={"About-Tab":["about-nav","mobile-about-nav"],"Projects-Tab":["projects-nav","mobile-projects-nav"],"Publications-Tab":["publications-nav","mobile-publications-nav"],"References-Tab":["references-nav","mobile-references-nav"],"Contact-Tab":["contact-nav","mobile-contact-nav"]};document.querySelectorAll(".nav-link, .mobile-nav-link").forEach(i=>{i.classList.remove("active-nav")}),r[t]&&r[t].forEach(i=>{const n=document.getElementById(i);n&&n.classList.add("active-nav")})}function Pi(s){const e={about:"About-Tab",projects:"Projects-Tab",publications:"Publications-Tab",references:"References-Tab",contact:"Contact-Tab"};e[s]&&document.getElementById(e[s]).click(),document.getElementById("tabs-section").scrollIntoView({behavior:"smooth"}),document.getElementById("mobile-nav-links").classList.remove("show")}async function $i(s){s&&(s.stopPropagation(),s.preventDefault());const e=document.getElementById("pdf-modal"),t=document.getElementById("resume-iframe"),r=document.getElementById("pdf-loading");if(e.classList.contains("hidden")){e.classList.remove("hidden"),document.body.style.overflow="hidden",r.classList.remove("hidden"),t.classList.add("hidden");try{let i=await he("resume");i||(i=await qt()),Array.isArray(i)&&(i=i.join("")),console.log("Processed Resume URL:",i),t.src=i,t.onload=()=>{r.classList.add("hidden"),t.classList.remove("hidden")},t.src=i}catch(i){console.log("error here",i),r.innerHTML=`
        <div class="text-center p-4">
          <i class="fas fa-exclamation-triangle text-red-400 text-3xl mb-2"></i>
          <p class="text-white">Failed to load resume</p>
          <button onclick="togglePdfModal(event)" 
            class="mt-2 px-4 py-2 bg-red-500 hover:bg-red-600 rounded">
            Close
          </button>
        </div>
      `,console.error("Error loading resume:",i)}}else e.classList.add("hidden"),document.body.style.overflow="",t.src=""}function Oi(){document.getElementById("mobile-nav-links").classList.toggle("show")}async function Ai(){try{console.log("Initializing publications tab..."),Ci();const s=new Promise(e=>{document.readyState==="complete"||document.readyState==="interactive"?e():document.addEventListener("DOMContentLoaded",e)});await Promise.race([Promise.all([Ft,s]),new Promise((e,t)=>setTimeout(()=>t(new Error("Initialization timeout")),5e3))]),console.log("Cache and DOM ready for publications"),document.addEventListener("publications-updated",wt),await wt()}catch(s){console.error("Publications initialization failed:",s),Vt(new Error("Failed to load publications"))}}async function wt(){try{console.log("Rendering publications..."),Li();const s=await he("publications");console.log("Publications data:",s);const e=document.querySelector("#Publications .space-y-4");if(!e)throw new Error("Publications container not found");if(!s||!s.length){e.innerHTML=`
        <div class="text-center py-8">
          <p class="dark:text-gray-400">No publications found</p>
        </div>
      `;return}e.innerHTML=s.map(t=>{const r=()=>{const i=[];return t.pdfLink&&i.push(`
              <a href="${t.pdfLink}" 
                 class="dark:text-blue-400 hover:underline flex items-center">
                <i class="fas fa-file-pdf mr-1"></i> PDF
              </a>
            `),t.doiLink&&i.push(`
              <a href="${t.doiLink}" 
                 class="dark:text-blue-400 hover:underline flex items-center">
                <i class="fas fa-link mr-1"></i> DOI
              </a>
            `),t.citation&&i.push(`
              <button onclick="navigator.clipboard.writeText('${t.citation}')"
                      class="dark:text-blue-400 hover:underline flex items-center">
                <i class="fas fa-quote-right mr-1"></i> Cite
              </button>
            `),t.externalLink&&i.push(`
              <button onclick="navigator.clipboard.writeText('${t.externalLink}')"
                      class="dark:text-blue-400 hover:underline flex items-center">
                <i class="fas fa-external-link-alt mr-1"></i> Read Article
              </button>
            `),i.join("")};return`
          <div class="dark:bg-slate-700 p-4 rounded-lg shadow dark:border-slate-600">
            <h3 class="font-bold text-lg">${t.title||"Untitled Publication"}</h3>
            <p class="text-sm dark:text-gray-400 mb-2">
              ${t.journal||"Unspecified Journal"}, ${t.year||"N/A"}
            </p>
            <p class="mb-2">${t.description||"No abstract available."}</p>
            <div class="flex space-x-3">
              ${r()}
            </div>
          </div>
        `}).join(""),console.log("Publications rendered successfully")}catch(s){console.error("Error rendering publications:",s),Vt(s)}}function Ci(){const s=document.querySelector("#Publications .space-y-4");s.innerHTML="";for(let e=0;e<3;e++)s.appendChild(zt())}function Vt(s){const e=document.querySelector("#Publications .space-y-4");e.innerHTML=`
    <div class="text-center py-8">
      <p class="text-red-500 dark:text-red-400">${s.message}</p>
      <button onclick="window.location.reload()" 
              class="mt-4 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded">
        Reload Page
      </button>
    </div>
  `}function Li(){const s=document.querySelector("#Publications .space-y-4");s.innerHTML=`
    <div class="text-center py-8">
      <p class="dark:text-gray-400">Loading publications...</p>
    </div>
  `}const ie={experience:[{title:"Software Engineer",period:"Jun 2022 – Present",company:"Equally.ai | Tel Aviv, Israel",achievements:["Designed AI-driven WCAG Compliance System (Golang/Kubernetes) improving accessibility by 40% across 1000+ sites","Architected 12+ microservices deployed on GCP/AWS Kubernetes, enhancing system reliability","Built subscription system with PayPal integration increasing revenue by 30% in 4 months"]},{title:"Software Engineer",period:"Jan 2021 – Jun 2022",company:"Twof Capital | Addis Ababa, Ethiopia",achievements:["Developed market-leading Ride Plus payment app generating 20% revenue growth","Engineered music streaming app (Go/Flutter) for 500k+ users with 4.3 rating","Built scalable microservices achieving 25% performance boost through TDD"]},{title:"Software Engineer",period:"Dec 2019 – Jan 2021",company:"Equb Financial Technologies | Addis Ababa, Ethiopia",achievements:["Developed RESTful API for saving system serving 10k+ users (Golang/Flutter)","Optimized API efficiency by 40% through PGX migration and query optimization","Reduced deployment time 50% via CI/CD automation"]}],education:[{degree:"Bachelor's in Software Engineering",period:"Oct 2017 – Jul 2022",institution:"Addis Ababa University",details:["Top 1% of batch with AI-Based Thesis Similarity Checker project","Developed Online Grading System Thesis"]},{degree:"Competitive Programming",period:"Oct 2022 – Nov 2023",institution:"",details:["Mastered Data Structures, Algorithms, and Discrete Mathematics"]}],skills:{languages:["Go/Golang","Python","JavaScript"],cloud:["Docker","Kubernetes","AWS","GCP","CI/CD"],specializations:["Microservices","Hexagonal Architecture","Distributed Systems","AI Integration"]}};function Ii(){const s=document.getElementById("About"),e={"Go/Golang":"dark:bg-blue-900 dark:text-blue-200",Python:"dark:bg-green-900 dark:text-green-200",JavaScript:"dark:bg-purple-900 dark:text-purple-200",Docker:"dark:bg-yellow-900 dark:text-yellow-200",Kubernetes:"dark:bg-red-900 dark:text-red-200",AWS:"dark:bg-indigo-900 dark:text-indigo-200",GCP:"dark:bg-blue-900 dark:text-blue-200","CI/CD":"dark:bg-gray-700 text-white",Microservices:"dark:bg-green-900 dark:text-green-200","Hexagonal Architecture":"dark:bg-purple-900 dark:text-purple-200","Distributed Systems":"dark:bg-blue-900 dark:text-blue-200","AI Integration":"dark:bg-red-900 dark:text-red-200"},t=r=>`${e[r]||"dark:bg-slate-800 text-white"} px-3 py-1 rounded-full text-sm`;s.innerHTML=`
      <h2 class="text-2xl font-bold mb-6">About Me</h2>
      <div class="space-y-8">
        <!-- Experience Section -->
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
          <div class="md:col-span-1">
            <h3 class="text-xl font-semibold">Experience</h3>
          </div>
          <div class="md:col-span-4">
            <ul class="space-y-4">
              ${ie.experience.map(r=>`
                <li class="p-4 dark:bg-slate-700 rounded-lg">
                  <div class="flex justify-between flex-wrap">
                    <strong class="block text-lg">${r.title}</strong>
                    <span class="dark:text-blue-400">${r.period}</span>
                  </div>
                  <p class="font-medium">${r.company}</p>
                  <ul class="list-disc pl-5 mt-2 space-y-1 text-sm">
                    ${r.achievements.map(i=>`<li>${i}</li>`).join("")}
                  </ul>
                </li>
              `).join("")}
            </ul>
          </div>
        </div>
  
        <div class="border-t border-slate-700 my-4"></div>
  
        <!-- Education Section -->
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
          <div class="md:col-span-1">
            <h3 class="text-xl font-semibold">Education</h3>
          </div>
          <div class="md:col-span-4">
            <ul class="space-y-4">
              ${ie.education.map(r=>`
                <li class="p-4 dark:bg-slate-700 rounded-lg">
                  <div class="flex justify-between flex-wrap">
                    <strong class="block">${r.degree}</strong>
                    <span class="dark:text-blue-400">${r.period}</span>
                  </div>
                  ${r.institution?`<p>${r.institution}</p>`:""}
                  <ul class="list-disc pl-5 mt-2 text-sm">
                    ${r.details.map(i=>`<li>${i}</li>`).join("")}
                  </ul>
                </li>
              `).join("")}
            </ul>
          </div>
        </div>
  
        <div class="border-t border-slate-700 my-4"></div>
  
        <!-- Skills Section -->
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
          <div class="md:col-span-1">
            <h3 class="text-xl font-semibold">Skills</h3>
          </div>
          <div class="md:col-span-4">
            <div class="p-4 dark:bg-slate-700 rounded-lg">
              <!-- Languages -->
              <div class="mb-4">
                <h4 class="font-medium mb-2">Languages</h4>
                <div class="flex flex-wrap gap-2">
                  ${ie.skills.languages.map(r=>`<span class="${t(r)}">${r}</span>`).join("")}
                </div>
              </div>
  
              <!-- Cloud & DevOps -->
              <div class="mb-4">
                <h4 class="font-medium mb-2">Cloud & DevOps</h4>
                <div class="flex flex-wrap gap-2">
                  ${ie.skills.cloud.map(r=>`<span class="${t(r)}">${r}</span>`).join("")}
                </div>
              </div>
  
              <!-- Specializations -->
              <div>
                <h4 class="font-medium mb-2">Specializations</h4>
                <div class="flex flex-wrap gap-2">
                  ${ie.skills.specializations.map(r=>`<span class="${t(r)}">${r}</span>`).join("")}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `}function Ri(){Ii()}function Di(){console.group("DOM State Verification"),console.log("document.readyState:",document.readyState),console.log("document.body exists:",!!document.body),console.log("Main container exists:",!!document.getElementById("projects-container")),console.groupEnd()}window.openTab=ji;window.handleNavClick=Pi;window.togglePdfModal=$i;window.toggleMobileMenu=Oi;window.showProjectModal=wi;window.hideProjectModal=ke;window.showMessageModal=Me;window.hideMessageModal=Jt;window.hideErrorModal=hi;window.saveResume=Ht;async function _t(){try{Di(),gi(),console.log("Starting initialization process..."),console.log("Initializing cache..."),Je(),console.log("Cache initialized successfully"),Ri(),pi(),yi(),console.log("Initializing navigation..."),Ti(),console.log("Navigation initialized"),console.log("Initializing projects tab..."),Ai(),await _i(),console.log("Tabs initialized"),console.log("Application fully initialized")}catch(s){console.error("Boot error:",s),de(`Application failed to start: ${s.message}`);try{const e=document.getElementById("projects-container");e&&(e.innerHTML=`
          <div class="col-span-full text-center py-8">
            <p class="text-red-500 dark:text-red-400">${s.message}</p>
            <button onclick="window.location.reload()" 
              class="mt-4 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded">
              Reload Page
            </button>
          </div>
        `)}catch(e){console.error("Fallback UI failed:",e)}}}function Ui(){console.log("Starting application..."),document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>{console.log("DOM fully loaded, initializing app"),_t()}):(console.log("DOM already ready, initializing app"),_t())}Ui();export{sr as g};


//# sourceMappingURL=data:application/json;base64,